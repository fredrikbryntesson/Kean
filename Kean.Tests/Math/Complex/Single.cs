// 
//  Single.cs (generated by template)
//  
//  Author:
//       Anders Frisk <andersfrisk77@gmail.com>
//  
//  Copyright (c) 2011 Anders Frisk
// 
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU Lesser General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
// 
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU Lesser General Public License for more details.
// 
//  You should have received a copy of the GNU Lesser General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.

using System;
using NUnit.Framework;
using Kean.Extension;
using Target = Kean.Math.Complex.Single;
namespace Kean.Math.Complex.Test
{
	public class Single :
		Kean.Test.Fixture<Single>
	{
		protected override void Run()
		{
			this.Run(
				this.Constructors,
				this.Equality,
				this.BasicFunctions,
				this.Arithmetics,
				this.Functions,
				this.Casts,
				this.DiscreteTransform,
				this.FastTransform,
				this.InverseDiscreteTransform,
				this.InverseFastTransform
		   //     this.DiscreteFastCompare
			);
		}
		class Comparer :
			System.Collections.IComparer
		{
			float tolerance;
			public Comparer(float tolerance)
			{
				this.tolerance = tolerance;
			}
			#region IComparer Members
			public int Compare(object x, object y)
			{
				return ((Target)x).Equals((Target)y, this.tolerance) ? 0 : 1;
			}
			#endregion
		}
		string prefix = "Kean.Math.Complex.Test.Single.";
		[Test]
		public void Constructors()
		{
			Target a = new Target();
			Verify(a.Real, Is.EqualTo(0), this.prefix + "Constructor.0");
			Verify(a.Imaginary, Is.EqualTo(0), this.prefix + "Constructor.1");
			a = new Target(1, 2);
			Verify(a.Real, Is.EqualTo(1), this.prefix + "Constructor.2");
			Verify(a.Imaginary, Is.EqualTo(2), this.prefix + "Constructor.3");
		}
		[Test]
		public void Equality()
		{
			Target a = new Target(1, 2);
			Target b = new Target(2, 3);
			Target c = new Target(1, 2);
			Verify(a, Is.Not.EqualTo(b), this.prefix + "Equality.0");
			Verify(b, Is.Not.EqualTo(a), this.prefix + "Equality.1");
			Verify(a, Is.EqualTo(c), this.prefix + "Equality.2");
			Verify(c, Is.EqualTo(a), this.prefix + "Equality.3");
		}
		[Test]
		public void BasicFunctions()
		{
			Verify(new Target(1, 2).Conjugate, Is.EqualTo(new Target(1, -2)), this.prefix + "BasicFunctions.0");
			Verify(new Target(1, 2).AbsoluteValue, Is.EqualTo(Kean.Math.Single.SquareRoot(5)), this.prefix + "BasicFunctions.1");
		}
		[Test]
		public void Arithmetics()
		{
			Target a = new Target(1, 2);
			Target b = new Target(2, 3);
			Target c = new Target(3, 5);
			Target d = new Target(-1, -1);
			Target e = new Target(-4, 7);
			Target f = new Target(0.615384615384615f, 0.076923076923077f);
			Verify(a + b, Is.EqualTo(c), this.prefix + "Arithmetics.0");
			Verify(a - b, Is.EqualTo(d), this.prefix + "Arithmetics.1");
			Verify(a - a, Is.EqualTo(new Target()), this.prefix + "Arithmetics.2");
			Verify(a * b, Is.EqualTo(e), this.prefix + "Arithmetics.3");
			Verify(a / b, Is.EqualTo(f).Using(new Comparer(1e-7f)), this.prefix + "Arithmetics.4");
		}
		[Test]
		public void Functions()
		{
			Target a = new Target(1, 2);
			Target b = new Kean.Math.Complex.Single(-1.131204383756814f, 2.471726672004819f);
			Target c = new Kean.Math.Complex.Single(0.804718956217050f, 1.107148717794090f);
			Verify(Kean.Math.Complex.Single.Exponential(a), Is.EqualTo(b).Using(new Comparer(1e-7f)), this.prefix + "Functions.0");
			Verify(Kean.Math.Complex.Single.Logarithm(a), Is.EqualTo(c).Using(new Comparer(1e-7f)), this.prefix + "Functions.1");
		}
		[Test]
		public void Casts()
		{
			Target a = 33f;
			Verify(a.Real, Is.EqualTo(33), this.prefix + "Casts.0");
			Verify(a.Imaginary, Is.EqualTo(0), this.prefix + "Casts.1");
			a = "33";
			Verify(a.Real, Is.EqualTo(33), this.prefix + "Casts.2");
			Verify(a.Imaginary, Is.EqualTo(0), this.prefix + "Casts.3");
			a = "33 + 22i";
			Verify(a.Real, Is.EqualTo(33), this.prefix + "Casts.4");
			Verify(a.Imaginary, Is.EqualTo(22), this.prefix + "Casts.5");
			a = "-33 -22*i";
			Verify(a.Real, Is.EqualTo(-33), this.prefix + "Casts.6");
			Verify(a.Imaginary, Is.EqualTo(-22), this.prefix + "Casts.7");
			a = "-22*i-33 ";
			Verify(a.Real, Is.EqualTo(-33), this.prefix + "Casts.8");
			Verify(a.Imaginary, Is.EqualTo(-22), this.prefix + "Casts.9");
			a = "-22f*i+33f ";
			Verify(a.Real, Is.EqualTo(33), this.prefix + "Casts.8");
			Verify(a.Imaginary, Is.EqualTo(-22), this.prefix + "Casts.9");
		}
		[Test]
		public void DiscreteTransform()
		{
			Target[] input = new Target[] {
				"1 + 2i",	
				"2 + 3i",
				"3 + 4i",
				"4 + 5i"};
			Target[] output = new Target[] {
				"10 + 14i",
				"-4",
				"-2 - 2i",
				"-4i"};
			Verify(Target.DiscreteTransform(input), Is.EqualTo(output).Using(new Comparer(1e-5f)), this.prefix + "DiscreteTransform.0");
		}
		[Test]
		public void FastTransform()
		{
			Target[] input = new Target[] {
				"1 + 2i",	
				"2 + 3i",
				"3 + 4i",
				"4 + 5i"};
			Target[] output = new Target[] {
				"10 + 14i",
				"-4",
				"-2 - 2i",
				"-4i"};
			Verify(Target.FastTransform(input), Is.EqualTo(output).Using(new Comparer(1e-5f)), this.prefix + "FastTransform.0");
		}
		[Test]
		public void InverseDiscreteTransform()
		{
			Target[] input = new Target[16];
			for (int i = 0; i < input.Length; i++)
				input[i] = new Target(i - 33.5f, 77.33f * i + 251);
			Target[] output = Target.InverseDiscreteTransform(Target.DiscreteTransform(input));
			Verify(input, Is.EqualTo(output).Using(new Comparer(1e-2f)), this.prefix + "InverseDiscreteTransform.0");
		}
		[Test]
		public void InverseFastTransform()
		{
			Target[] input = new Target[16];
			for (int i = 0; i < input.Length; i++)
				input[i] = new Target(i - 33.5f, 77.33f * i + 251);
			Target[] output = Target.InverseFastTransform(Target.FastTransform(input));
			Verify(input, Is.EqualTo(output).Using(new Comparer(1e-3f)), this.prefix + "InverseFastTransform.0");
		}
		[Test]
		public void SpeedCompare()
		{
			Target[] input = new Target[16];
			for (int i = 0; i < input.Length; i++)
				input[i] = new Target(i - 33.5f, 77.33f * i + 251);
			int count = 10000;
			Target[] output;
			System.Diagnostics.Stopwatch watch = new System.Diagnostics.Stopwatch();
			watch.Reset();
			watch.Start();
			for (int i = 0; i < count; i++)
				output = Target.FastTransform(input);
			watch.Stop();
			Console.WriteLine(watch.ElapsedMilliseconds);
			watch.Reset();
			watch.Start();
			for (int i = 0; i < count; i++)
				output = Target.DiscreteTransform(input);
			watch.Stop();
			Console.WriteLine(watch.ElapsedMilliseconds);
			// Discrete 1121 millisecond
			// Fast 205 milliseconds
		}
	}
}
