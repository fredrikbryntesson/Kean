<#@ template language="C#v3.5" hostspecific="True" #>
<#
	GenerateStart("Single", "float");
    SaveOutput("Single/Point.cs");  
    
    GenerateStart("Double", "double");
    SaveOutput("Double/Point.cs");   

    GenerateStart("Integer", "int");
    SaveOutput("Integer/Point.cs");  
#>
<#+
  void SaveOutput(string outputFileName)
  {
      string templateDirectory = System.IO.Path.GetDirectoryName(Host.TemplateFile);
      string outputFilePath = System.IO.Path.Combine(templateDirectory, outputFileName);
      System.IO.File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
      this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
  }
#>
<#+
    void GenerateStart(string @namespace1,  string @type)
    {
#>
// 
//  Point.cs (generated by template)
//  
//  Author:
//       Anders Frisk <andersfrisk77@gmail.com>
//  
//  Copyright (c) 2011-2013 Simon Mika
// 
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU Lesser General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
// 
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU Lesser General Public License for more details.
// 
//  You should have received a copy of the GNU Lesser General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.

using System;
using NUnit.Framework;
using Target = Kean.Math.Geometry3D;
using Kean.Extension;

namespace Kean.Math.Geometry3D.Test.<#= @namespace1 #>
{ 
	[TestFixture]
    public class Point :
        Kean.Test.Fixture<Point>
       
    {
		float Precision { get { return 1e-4f; } }
        Target.<#= @namespace1 #>.Point CastFromString(string value)
        {
            return value;
        }
        string CastToString(Target.<#= @namespace1 #>.Point value)
        {
            return value;
        }
        
           Target.<#= @namespace1 #>.Point Point0 = new Target.<#= @namespace1 #>.Point((<#= @type #>)22, (<#= @type #>)-3, (<#= @type #>)10);
           Target.<#= @namespace1 #>.Point Point1 = new Target.<#= @namespace1 #>.Point((<#= @type #>)12, (<#= @type #>)13, (<#= @type #>)20);
           Target.<#= @namespace1 #>.Point Point2 = new Target.<#= @namespace1 #>.Point((<#= @type #>)34, (<#= @type #>)10, (<#= @type #>)30);
		   Target.<#= @namespace1 #>.Point Point3 = new Target.<#= @namespace1 #>.Point((<#= @type #>)10, (<#= @type #>)20, (<#= @type #>)30);
        protected override void Run()
        {
          
            this.Run(
				this.Equality,
                this.Addition,
                this.Subtraction,
                this.ScalarMultitplication,
                this.ScalarProduct,
                this.Casting,
                this.Hash,
                this.ValueStringCasts,
                this.Norm,
				<#=	@type == "float" || "double"? @"
				this.Casts
				" : "" #>
                );
        }
        [Test]
        public void Norm()
        {
            Verify(this.Point0.Norm, Is.EqualTo(24.3515).Within(this.Precision));
        }
		[Test]
		public void ScalarProduct()
		{
			Target.<#= @namespace1 #>.Point point = new Target.<#= @namespace1 #>.Point();
			Verify(this.Point0.ScalarProduct(point), Is.EqualTo(0).Within(this.Precision));
			Verify(this.Point0.ScalarProduct(this.Point1), Is.EqualTo(425).Within(this.Precision));
		}
		[Test]
		public void ScalarMultitplication()
		{
			Verify(this.Point0.VectorProduct(this.Point1), Is.EqualTo(-this.Point1.VectorProduct(this.Point0)));
			Verify((this.Point0.VectorProduct(this.Point1)).X, Is.EqualTo((-190)).Within(this.Precision));
			Verify((this.Point0.VectorProduct(this.Point1)).Y, Is.EqualTo((-320)).Within(this.Precision));
			Verify((this.Point0.VectorProduct(this.Point1)).Z, Is.EqualTo((322)).Within(this.Precision));
		}
		#region Equality
		[Test]
		public void Equality()
		{
			Target.<#= @namespace1 #>.Size point = new Target.<#= @namespace1 #>.Size(); point = null;
			Verify(this.Point0, Is.EqualTo(this.Point0));
			Verify(this.Point0, Is.EqualTo(this.Point0));
			Verify(this.Point0.Equals(this.Point0), Is.True);
			Verify(this.Point0.Equals(this.Point0 as object), Is.True);
			Verify(this.Point0 == this.Point0, Is.True);
			Verify(this.Point0 != this.Point1, Is.True);
			Verify(this.Point0 == point, Is.False);
			Verify(point == point, Is.True);
			Verify(point == this.Point0, Is.False);
		}
		#endregion
		#region Arithmetic
		[Test]
		public void Addition()
		{
			Verify((this.Point0.X + this.Point1.X), Is.EqualTo(this.Point2.X).Within(this.Precision));
			Verify((this.Point0.Y + this.Point1.Y), Is.EqualTo(this.Point2.Y).Within(this.Precision));
			Verify((this.Point0.Z + this.Point1.Z), Is.EqualTo(this.Point2.Z).Within(this.Precision));
		}
		[Test]
		public void Subtraction()
		{
			Target.<#= @namespace1 #>.Size size = new Target.<#= @namespace1 #>.Size(0, 0, 0);
			Target.<#= @namespace1 #>.Size result = this.Point0 - this.Point0;
			Verify(result, Is.EqualTo(size));
		}
		#endregion
		#region Hash Code
		[Test]
		public void Hash()
		{
			Verify(this.Point0.GetHashCode(), Is.Not.EqualTo(0));
		}
		#endregion
		#region Casts
		[Test]
		public void Casting()
		{
			string value = "10, 20, 30";
			Verify(this.CastToString(this.Point3), Is.EqualTo(value));
			Verify(this.CastFromString(value), Is.EqualTo(this.Point3));
		}
		 [Test]
        public void ValueStringCasts()
        {
            string textFromValue = new Target.<#= @namespace1 #>.Point(10, 20, 30);
            Verify(textFromValue, Is.EqualTo("10, 20, 30"));
            Target.<#= @namespace1 #>.Point @integerFromText = "10 20 30";
            Verify(@integerFromText.X, Is.EqualTo(10));
            Verify(@integerFromText.Y, Is.EqualTo(20));
            Verify(@integerFromText.Z, Is.EqualTo(30));
        }

		
		<#=	@type == "float" ? @"
		 [Test]
        public void Casts()
        {
            // integer - <#= @namespace1 #>
            Target.Integer.Point integer = new Target.Integer.Point(10, 20, 30);
            Target.<#= @namespace1 #>.Point <#= @namespace1 #> = integer;
            Verify(<#= @namespace1 #>.X, Is.EqualTo(10));
            Verify(<#= @namespace1 #>.Y, Is.EqualTo(20));
            Verify(<#= @namespace1 #>.Z, Is.EqualTo(30));
            Verify((Target.Integer.Point)<#= @namespace1 #>, Is.EqualTo(integer));
        }
		" : ""	#>
		<#=	@type == "double" ? @"
		[Test]
        public void Casts()
        {
            // integer - <#= @namespace1 #>
            Target.Double.Point double = new Target.Double.Point(10, 20, 30);
            Target.<#= @namespace1 #>.Point <#= @namespace1 #> = integer;
            Verify(<#= @namespace1 #>.X, Is.EqualTo(10));
            Verify(<#= @namespace1 #>.Y, Is.EqualTo(20));
            Verify(<#= @namespace1 #>.Z, Is.EqualTo(30));
            Verify((Target.Double.Point)<#= @namespace1 #>, Is.EqualTo(double));
        }
		" : "" #>
		  #endregion
      }
}
<#+
    }  
#>
