<#@ template language="C#" hostspecific="True" #>
<#
    GenerateStart("Single",  "float");
  	SaveOutput("Single/Transform.cs");  
    
    GenerateStart("Double",  "double");
    SaveOutput("Double/Transform.cs");   
#>
<#+
  void SaveOutput(string outputFileName)
  {
      string templateDirectory = System.IO.Path.GetDirectoryName(Host.TemplateFile);
      string outputFilePath = System.IO.Path.Combine(templateDirectory, outputFileName);
      System.IO.File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
      this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
  }
#>
<#+
    void GenerateStart(string @namespace, string @type)
    {
#>
// 
//  Transform.cs (generated by template)
//  
//  Author:
//       Anders Frisk <andersfrisk77@gmail.com>
//  
//  Copyright (c) 2011 Anders Frisk
// 
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU Lesser General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
// 
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU Lesser General Public License for more details.
// 
//  You should have received a copy of the GNU Lesser General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.

using System;
using NUnit.Framework;
using Target = Kean.Math.Geometry3D;
using Kean.Extension;

namespace Kean.Math.Geometry3D.Test.<#= @namespace #>
{
    [TestFixture]
    public class Transform :
   Kean.Test.Fixture<Transform>
    {
		<#= @type #> Precision { get { return 1e-5f; } }
        Target.<#= @namespace #>.Transform CastFromString(string value)
        {
            return (Kean.Math.Geometry3D.<#= @namespace #>.Transform)value;
        }
        string CastToString(Kean.Math.Geometry3D.<#= @namespace #>.Transform value)
        {
            return (string)value;
        }
		    Target.<#= @namespace #>.Transform Transform0 = new Kean.Math.Geometry3D.<#= @namespace #>.Transform(-1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);
			Target.<#= @namespace #>.Transform Transform1 = new Kean.Math.Geometry3D.<#= @namespace #>.Transform(-1, 2, 3, 4, 5, 6, 7, 8, -5, 10, 11, 12);
			Target.<#= @namespace #>.Transform Transform2 = new Kean.Math.Geometry3D.<#= @namespace #>.Transform(30, 32, 36, 58, 81, 96, -10, 14, 24, 128, 182, 216);
			Target.<#= @namespace #>.Transform Transform3 = new Kean.Math.Geometry3D.<#= @namespace #>.Transform(-0.5f, 1, -0.5f, 1, -5, 3, -0.5f, 3.66666666666666f, -2.16666666666667f, 0, 1, -2);
			Target.<#= @namespace #>.Transform Transform4 = new Target.<#= @namespace #>.Transform(10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120);	
		    Target.<#= @namespace #>.Point Point0 = new Kean.Math.Geometry3D.<#= @namespace #>.Point(34, 10, 30);
			Target.<#= @namespace #>.Point Point1 = new Kean.Math.Geometry3D.<#= @namespace #>.Point(226, 369, 444);
        protected override void Run()
        {

            this.Run(
                this.InverseTransform1,
                this.InverseTransform2,
                this.InverseTransform3,
			    this.Equality,
				this.CreateZeroTransform,
				this.CreateIdentity,
				this.CreateRotation,
				this.CreateScale,
				this.CreateTranslation,
				this.Rotatate,
				this.Scale,
				this.Translatate,
				this.InverseTransform,
				this.MultiplicationTransformTransform,
				this.MultiplicationTransformPoint,
				this.GetTranslation,
				this.GetScalingX,
				this.GetScalingY,
				this.GetScalingZ,
				this.GetScaling,
				this.CastToArray,
				this.MultiplicationTransformTransform,
				this.MultiplicationTransformPoint,
				this.Casting,
				this.Hash
            );
        }

        <#= @type #> Cast(double value)
        {
            return (<#= @type #>)value;
        }
		#region Equality
		[Test]
		public void Equality()
		{
			Target.<#= @namespace #>.Transform transform = null;
			Verify(this.Transform0, Is.EqualTo(this.Transform0));
			Verify(this.Transform0.Equals(this.Transform0 as object), Is.True);
			Verify(this.Transform0 == this.Transform0, Is.True);
			Verify(this.Transform0 != this.Transform1, Is.True);
			Verify(this.Transform0 == Transform3, Is.False);    
			Verify(transform == transform, Is.True);
		    Verify(transform == this.Transform0, Is.False); 
		}
		#endregion
        [Test]
        public void InverseTransform1()
        {

            Kean.Math.Geometry3D.<#= @namespace #>.Transform transform =
                new Kean.Math.Geometry3D.<#= @namespace #>.Transform(0.035711678574190f, 0.849129305868777f, 0.933993247757551f, 0.678735154857773f, 0.757740130578333f, 0.743132468124916f, 0.392227019534168f, 0.655477890177557f, 0.171186687811562f, 0.706046088019609f, 0.031832846377421f, 0.276922984960890f);
            Kean.Math.Geometry3D.<#= @namespace #>.Transform transformInverseCorrect = new Kean.Math.Geometry3D.<#= @namespace #>.Transform(-1.304260393891308f, 1.703723523873863f, -0.279939209639535f, 0.639686782697661f, -1.314595978968342f, 2.216619899417434f, 0.538976631155336f, 1.130007253038916f, -2.004511083979782f, 0.751249880258891f, -1.473984978790241f, 0.682183855876876f);

            Kean.Math.Matrix.<#= @namespace #> transformInverseMatrix1 = (Kean.Math.Matrix.<#= @namespace #>)(<#= @type #>[,])transform.Inverse;
            Kean.Math.Matrix.<#= @namespace #> transformInverseMatrix2 = (Kean.Math.Matrix.<#= @namespace #>)(<#= @type #>[,])transformInverseCorrect;
            Verify(transformInverseMatrix1.Distance(transformInverseMatrix2), Is.LessThan(0.00001));
        }
		#region Arithmetic
		[Test]
		public void InverseTransform()
		{
			Target.<#= @namespace #>.Transform transform = this.Transform0.Inverse;
			Target.<#= @namespace #>.Transform correct = this.Transform3;
			Verify(transform.A, Is.EqualTo(correct.A).Within(this.Precision));
			Verify(transform.B, Is.EqualTo(correct.B).Within(this.Precision));
			Verify(transform.C, Is.EqualTo(correct.C).Within(this.Precision));
			Verify(transform.D, Is.EqualTo(correct.D).Within(this.Precision));
			Verify(transform.E, Is.EqualTo(correct.E).Within(this.Precision));
			Verify(transform.F, Is.EqualTo(correct.F).Within(this.Precision));
			Verify(transform.G, Is.EqualTo(correct.G).Within(this.Precision));
			Verify(transform.H, Is.EqualTo(correct.H).Within(this.Precision));
			Verify(transform.I, Is.EqualTo(correct.I).Within(this.Precision));
			Verify(transform.J, Is.EqualTo(correct.J).Within(this.Precision));
			Verify(transform.K, Is.EqualTo(correct.K).Within(this.Precision));
			Verify(transform.L, Is.EqualTo(correct.L).Within(this.Precision));
		}
		[Test]
		public void MultiplicationTransformTransform()
		{
			Verify(this.Transform0 * this.Transform1, Is.EqualTo(this.Transform2));
		}
		[Test]
		public void MultiplicationTransformPoint()
		{
			Verify(this.Transform0 * this.Point0, Is.EqualTo(this.Point1));
		}
		#endregion
		[Test]
		public void CreateZeroTransform()
		{
			Target.<#= @namespace #>.Transform transform = new Target.<#= @namespace #>.Transform();
			Verify(transform.A, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.B, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.C, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.D, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.E, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.F, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.G, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.H, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.I, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.J, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.K, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.L, Is.EqualTo(this.Cast(0)).Within(this.Precision));
		}
		[Test]
		public void CreateIdentity()
		{
			Target.<#= @namespace #>.Transform transform = Target.<#= @namespace #>.Transform.Identity; 
			Verify(transform.A, Is.EqualTo(this.Cast(1)).Within(this.Precision));
			Verify(transform.B, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.C, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.D, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.E, Is.EqualTo(this.Cast(1)).Within(this.Precision));
			Verify(transform.F, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.G, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.H, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.I, Is.EqualTo(this.Cast(1)).Within(this.Precision));
			Verify(transform.J, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.K, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.L, Is.EqualTo(this.Cast(0)).Within(this.Precision));
		}
		[Test]
		public void Rotatate()
		{
			Target.<#= @namespace #>.Transform identity = Target.<#= @namespace #>.Transform.Identity;
			<#= @type #> angle = Math.<#= @namespace #>.ToRadians(20);
			Target.<#= @namespace #>.Transform transform = Target.<#= @namespace #>.Transform.CreateRotationX(angle);
			transform = transform.RotateX(-angle);
			Verify(transform.A, Is.EqualTo(this.Cast(1)).Within(this.Precision));
			Verify(transform.B, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.C, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.D, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.E, Is.EqualTo(this.Cast(1)).Within(this.Precision));
			Verify(transform.F, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.G, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.H, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.I, Is.EqualTo(this.Cast(1)).Within(this.Precision));
			Verify(transform.J, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.K, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.L, Is.EqualTo(this.Cast(0)).Within(this.Precision));
		}
		[Test]
		public void Scale()
		{
			Target.<#= @namespace #>.Transform identity =Target.<#= @namespace #>.Transform.Identity;
			<#= @type #> scale = 20;
			Target.<#= @namespace #>.Transform transform = Target.<#= @namespace #>.Transform.CreateScaling(scale, scale, scale);
			transform = transform.Scale(1 / scale, 1 / scale, 1 / scale);
			Verify(transform.A, Is.EqualTo(this.Cast(1)).Within(this.Precision));
			Verify(transform.B, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.C, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.D, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.E, Is.EqualTo(this.Cast(1)).Within(this.Precision));
			Verify(transform.F, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.G, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.H, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.I, Is.EqualTo(this.Cast(1)).Within(this.Precision));
			Verify(transform.J, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.K, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.L, Is.EqualTo(this.Cast(0)).Within(this.Precision));
		}
		[Test]
		public void Translatate()
		{
			<#= @type #> xDelta = 40;
			<#= @type #> yDelta = -40;
			<#= @type #> zDelta = 30;
			Target.<#= @namespace #>.Transform transform = Target.<#= @namespace #>.Transform.CreateTranslation(xDelta, yDelta, zDelta);
			transform = transform.Translate(-xDelta, -yDelta, -zDelta);
			Verify(transform.A, Is.EqualTo(this.Cast(1)).Within(this.Precision));
			Verify(transform.B, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.C, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.D, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.E, Is.EqualTo(this.Cast(1)).Within(this.Precision));
			Verify(transform.F, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.G, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.H, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.I, Is.EqualTo(this.Cast(1)).Within(this.Precision));
			Verify(transform.J, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.K, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.L, Is.EqualTo(this.Cast(0)).Within(this.Precision));
		}
		[Test]
		public void CreateRotation()
		{
			<#= @type #> angle = Math.<#= @namespace #>.ToRadians(20);
			Target.<#= @namespace #>.Transform transform = Target.<#= @namespace #>.Transform.CreateRotationX(angle);
			Verify(transform.A, Is.EqualTo(this.Cast(1)).Within(this.Precision));
			Verify(transform.B, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.C, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.D, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.G, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.E, Is.EqualTo(Math.<#= @namespace #>.Cosinus(angle)).Within(this.Precision));
			Verify(transform.F, Is.EqualTo(Math.<#= @namespace #>.Sinus(angle)).Within(this.Precision));
			Verify(transform.H, Is.EqualTo(Math.<#= @namespace #>.Sinus(-angle)).Within(this.Precision));
			Verify(transform.I, Is.EqualTo(Math.<#= @namespace #>.Cosinus(angle)).Within(this.Precision));
			Verify(transform.J, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.K, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.L, Is.EqualTo(this.Cast(0)).Within(this.Precision));
		}
		[Test]
		public void CreateScale()
		{
			<#= @type #> scale = 20;
			Target.<#= @namespace #>.Transform transform = Target.<#= @namespace #>.Transform.CreateScaling(scale, scale, scale);
			Verify(transform.A, Is.EqualTo(scale).Within(this.Precision));
			Verify(transform.E, Is.EqualTo(scale).Within(this.Precision));
			Verify(transform.I, Is.EqualTo(scale).Within(this.Precision));
			Verify(transform.B, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.C, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.D, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.F, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.G, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.H, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.J, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.K, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.L, Is.EqualTo(this.Cast(0)).Within(this.Precision));
		}
		[Test]
		public void CreateTranslation()
		{
			<#= @type #> xDelta = 40;
			<#= @type #> yDelta = -40;
			<#= @type #> zDelta = 30;
			Target.<#= @namespace #>.Transform transform = Target.<#= @namespace #>.Transform.CreateTranslation(xDelta, yDelta, zDelta);
			Verify(transform.A, Is.EqualTo(this.Cast(1)).Within(this.Precision));
			Verify(transform.B, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.C, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.D, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.E, Is.EqualTo(this.Cast(1)).Within(this.Precision));
			Verify(transform.F, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.G, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.H, Is.EqualTo(this.Cast(0)).Within(this.Precision));
			Verify(transform.I, Is.EqualTo(this.Cast(1)).Within(this.Precision));
			Verify(transform.J, Is.EqualTo(xDelta).Within(this.Precision));
			Verify(transform.K, Is.EqualTo(yDelta).Within(this.Precision));
			Verify(transform.L, Is.EqualTo(zDelta).Within(this.Precision));
		}
        [Test]
        public void InverseTransform2()
        {
            Kean.Math.Geometry3D.<#= @namespace #>.Transform transform =
                new Kean.Math.Geometry3D.<#= @namespace #>.Transform(-0.829516518295923f, -0.207909983627822f, -0.518339449185655f, -0.176317665787488f, 0.978147963606672f, -0.110175505550793f, 0.529919264233205f, 0, -0.848048096156426f, 0, 0, 0);
            Kean.Math.Geometry3D.<#= @namespace #>.Transform transformInverseCorrect =
                new Kean.Math.Geometry3D.<#= @namespace #>.Transform(-0.829516518295923f, -0.176317665787488f, 0.529919264233205f, -0.207909983627822f, 0.978147963606672f, -1.15118542239879e-17f, -0.518339449185655f, -0.110175505550793f, -0.848048096156426f, 0, 0, 0);
            Kean.Math.Matrix.<#= @namespace #> transformInverseMatrix1 = (Kean.Math.Matrix.<#= @namespace #>)(<#= @type #>[,])transform.Inverse;
            Kean.Math.Matrix.<#= @namespace #> transformInverseMatrix2 = (Kean.Math.Matrix.<#= @namespace #>)(<#= @type #>[,])transformInverseCorrect;
            Verify(transformInverseMatrix1.Distance(transformInverseMatrix2), Is.LessThan(0.0000001));
        }
        [Test]
        public void InverseTransform3()
        {
            Kean.Math.Matrix.<#= @namespace #> transformMatrix = (Kean.Math.Matrix.<#= @namespace #>)(<#= @type #>[,])this.Transform0;
            Kean.Math.Matrix.<#= @namespace #> transformInverseMatrix1 = transformMatrix.Inverse();
            Kean.Math.Matrix.<#= @namespace #> transformInverseMatrix2 = (Kean.Math.Matrix.<#= @namespace #>)(<#= @type #>[,])(this.Transform0.Inverse);
            Verify(transformInverseMatrix1.Distance(transformInverseMatrix2), Is.LessThan(1e-5f));
        }
		[Test]
		public void GetScalingX()
		{
			<#= @type #> scale = this.Transform0.ScalingX;
			Verify(scale, Is.EqualTo(this.Cast(3.7416575f)).Within(this.Precision));
		}
		[Test]
		public void GetScalingY()
		{
			<#= @type #> scale = this.Transform0.ScalingY;
			Verify(scale, Is.EqualTo(this.Cast(8.77496433f)).Within(this.Precision));
		}
		[Test]
		public void GetScalingZ()
		{
			<#= @type #> scale = this.Transform0.ScalingZ;
			Verify(scale, Is.EqualTo(this.Cast(13.9283886f)).Within(this.Precision));
		}
		[Test]
		public void GetScaling()
		{
			<#= @type #> scale = this.Transform0.Scaling;
			Verify(scale, Is.EqualTo(this.Cast(8.8150)).Within(this.Precision));
		}
		[Test]
		public void GetTranslation()
		{
			Target.<#= @namespace #>.Size translation = this.Transform0.Translation;
			Verify(translation.Width, Is.EqualTo(this.Cast(10)).Within(this.Precision));
			Verify(translation.Height, Is.EqualTo(this.Cast(11)).Within(this.Precision));
			Verify(translation.Depth, Is.EqualTo(this.Cast(12)).Within(this.Precision));
		}

		[Test]
		public void Casting()
		{
			string value = "10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120";
			Verify(this.CastToString(this.Transform4), Is.EqualTo(value));
			Verify(this.CastFromString(value), Is.EqualTo(this.Transform4));
		}
		
		#region Hash Code
		[Test]
		public void Hash()
		{
			Verify(this.Transform0.GetHashCode(), Is.Not.EqualTo(0));
		}
		#endregion
		public void CastToArray()
		{
			<#= @type #>[,] values = (<#= @type #>[,])(Target.<#= @namespace #>.Transform.Identity);
			for (int x = 0; x < 4; x++)
				for (int y = 0; y < 4; y++)
					Verify(values[x, y], Is.EqualTo(this.Cast(x == y ? 1 : 0)).Within(this.Precision));
		}

      
    }
}
<#+
    }  
#>
