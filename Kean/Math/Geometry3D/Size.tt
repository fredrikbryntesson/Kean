<#@ template language="C#" hostspecific="True" #>
<#
    GenerateStart("Single",  "float");
    SaveOutput("Single/Size.cs");  
    
    GenerateStart("Double",  "double");
    SaveOutput("Double/Size.cs");   

    GenerateStart("Integer",  "int");
    SaveOutput("Integer/Size.cs");  
#>
<#+
  void SaveOutput(string outputFileName)
  {
      string templateDirectory = System.IO.Path.GetDirectoryName(Host.TemplateFile);
      string outputFilePath = System.IO.Path.Combine(templateDirectory, outputFileName);
      System.IO.File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
      this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
  }
#>
<#+
    void GenerateStart(string @namespace, string @type)
    {
#>
// 
//   Size.cs (generated by template)
//  
//  Author:
//       Simon Mika <smika@hx.se>
//  
//  Copyright (c) 2011-2013 Simon Mika
// 
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU Lesser General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
// 
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU Lesser General Public License for more details.
// 
//  You should have received a copy of the GNU Lesser General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.

using System;
using Kean.Extension;

namespace Kean.Math.Geometry3D.<#= @namespace #>
{
    public struct Size:
	 IEquatable<Size>

    {
		public <#= @type #> Width;
		public <#= @type #> Height;
		public <#= @type #> Depth;
		public Size(<#= @type #> width, <#= @type #> height, <#= @type #> depth)
		{
			this.Width = width;
			this.Height = height;
			this.Depth = depth;
		}
		#region Static Constants
		public static Size BasisX { get { return new Size(1, 0, 0); } }
		public static Size BasisY { get { return new Size(0, 1, 0); } }
		public static Size BasisZ { get { return new Size(0, 0, 1); } }
		#endregion
		#region properties
		public <#= @type #> Norm { get { return Math.<#= @namespace #>.SquareRoot((Math.<#= @namespace #>.Squared(this.Width) + Math.<#= @namespace #>.Squared(this.Height) + Math.<#= @namespace #>.Squared(this.Depth))); } }
		public <#= @type #> Azimuth { get { return Math.<#= @namespace #>.ArcusTangensExtended(this.Width, this.Height); } }
		public bool Empty { get { return this.Width == 0 || this.Height == 0 || this.Depth == 0; } }
		public <#= @type #> Volume { get { return this.Width * this.Height * this.Depth; } }
		//public <#= @type #> Elevation
		//{
		//	get
		//	{
		//		<#= @type #> result = new <#= @type #>();
		//		<#= @type #> r = this.Norm;
		//		if (r != result)
		//			result = (this.Z / r) . Math.<#= @namespace #>.Clamp(-1,Math.<#= @namespace #>.ArcusCosinus(1));
		//		return result;
		//	}
		//}
		#endregion
		#region Methods
		public <#= @type #> ScalarProduct(Size other)
		{
			return this.Width * other.Width + this.Height * other.Height + this.Depth * other.Depth;
		}
		public Size VectorProduct(Size other)
		{
			return new Size(this.Height * other.Depth - other.Height * this.Depth, -(this.Width * other.Depth - other.Width * this.Depth),this.Width * other.Height - other.Width * this.Height);
		}
		public <#= @type #> Distance(Size other)
		{
			return (this - other).Norm;
		}
		#endregion

		#region Arithmetic Operators
		public static Size operator *(Transform left, Size right)
		{
			return new Size(left.A * right.Width + left.D * right.Height + left.G * right.Depth, left.B * right.Width + left.E * right.Height + left.H * right.Depth, left.C * right.Width + left.F * right.Height + left.I * right.Depth);
		}
		#endregion
		#region Arithmetic Vector - Vector Operators
		
		public static Size operator +(Point left, Size right)
		{
			return new Size(left.X + right.Width, left.Y + right.Height, left.Z + right.Depth);
		}
		public static Size operator +(Size left, Size right)
        {
            return new Size(left.Width + right.Width, left.Height + right.Height,left.Depth + right.Depth);
        }
		public static Size operator -(Size vector)
		{
			return new Size( -vector.Width, -vector.Height, -vector.Depth);
		}
		public static Size operator -(Point left, Size right)
		{
			return new Size(left.X - right.Width, left.Y - right.Height, left.Z - right.Depth);
		}
		public static Size operator -(Size left, Size right)
		{
			return new Size(left.Width - right.Width, left.Height - right.Height, left.Depth - right.Depth);
		}
		public static Size operator *(Size left, Size right)
        {
            return new Size(left.Width * right.Width, left.Height * right.Height, left.Depth * right.Depth);
        }
        public static Size operator *(Size left,Point right)
        {
            return new Size(left.Width * right.X, left.Height * right.Y, left.Depth * right.Z);
        }
		public static Size operator *(Point left, Size right)
		{
			return new Size(left.X * right.Width, left.Y * right.Height, left.Z * right.Depth);
		}
		public static Size operator /(Size left, Size right)
        {
            return new Size(left.Width / right.Width, left.Height / right.Height, left.Depth / right.Depth);
        }
        public static Size operator /(Size left,Point right)
        {
            return new Size(left.Width / right.X, left.Height / right.Y, left.Depth / right.Z);
        }
		public static Size operator /(Point left, Size right)
		{
			return new Size(left.X / right.Width, left.Y / right.Height, left.Z / right.Depth);
		}
		#endregion
		#region Arithmetic Vector and Scalar
		public static Size operator *(Size left, <#= @type #> right)
		{
			return new Size(left.Width * right, left.Height * right, left.Depth * right);
		}
		public static Size operator *(<#= @type #> left, Size right)
		{
			return new Size(right.Width * left, right.Height * left, right.Depth * left);
		}
		public static Size operator /(Size left, <#= @type #> right)
		{
			return new Size(left.Width / right, left.Height / right, left.Depth / right);
		}
		#endregion
		#region Comparison Operators
		/// <summary>
		/// Defines equality.
		/// </summary>
		/// <param name="left">Point left of operator.</param>
		/// <param name="right">Point right of operator.</param>
		/// <returns>True if <paramref name="left"/> equals <paramref name="right"/> else false.</returns>
		public static bool operator ==(Size left, Size right)
		{
			return object.ReferenceEquals(left, right) ||
				!object.ReferenceEquals(left, null) && !object.ReferenceEquals(right, null) && left.Width == right.Width && left.Height == right.Height && left.Depth == right.Depth;
		}
		/// <summary>
		/// Defines inequality.
		/// </summary>
		/// <param name="left">Point left of operator.</param>
		/// <param name="right">Point right of operator.</param>
		/// <returns>False if <paramref name="left"/> equals <paramref name="right"/> else true.</returns>
		public static bool operator !=(Size left, Size right)
		{
			return !(left == right);
		}
		 public static bool operator <(Size left, Size right)
        {
            return left.Width < right.Width && left.Height < right.Height && left.Depth < right.Depth;
        }
        public static bool operator >(Size left, Size right)
        {
            return left.Width > right.Width && left.Height > right.Height && left.Depth > right.Depth;
        }
        public static bool operator <=(Size left, Size right)
        {
            return left.Width <= right.Width && left.Height <= right.Height && left.Depth <= right.Depth;
        }
        public static bool operator >=(Size left, Size right)
        {
            return left.Width >= right.Width && left.Height >= right.Height && left.Depth >= right.Depth;
        }
		#endregion
		#region Object overides and IEquatable<VectorType>
		public override bool Equals(object other)
		{
			return (other is Size && this.Equals((Size)other));
		}
		// other is not null here.
		public bool Equals(Size other)
		{
			return this == other;
		}
		public override int GetHashCode()
		{
			return 33 * (33 * this.Width.GetHashCode() ^ this.Height.GetHashCode()) ^ this.Depth.GetHashCode();
		}
		public override string ToString()
		{
			return this.ToString("{0}, {1}, {2}");
		}
		public string ToString(string format)
		{
			return string.Format(format, ((<#= @type #>)this.Width).ToString(), ((<#= @type #>)this.Height).ToString(), ((<#= @type #>)this.Depth).ToString());
		}
		#endregion
        #region Casts
        public static implicit operator string(Size value)
        {
            return value.NotNull() ? value.ToString() : null;
        }
		public static implicit operator Size(string value)
        {
			Size result = new Size();
            if (value.NotEmpty())
            {

                try
                {
                    string[] values = value.Split(new char[] { ',', ' ' }, StringSplitOptions.RemoveEmptyEntries);
                    if (values.Length == 3)
                        result = new Size(Kean.Math.<#= @namespace #>.Parse(values[0]), Kean.Math.<#= @namespace #>.Parse(values[1]), Kean.Math.<#= @namespace #>.Parse(values[2]));
                }
                catch
                {
                }
            }
            return result;
        }
		public static explicit operator Size(Point value)
        {
            return new Size(value.X, value.Y, value.Z);
        }
		<#= @type == "double" ? @"
		public static implicit operator Size(Single.Size value)
        {
            return new Size(value.Width, value.Height, value.Depth);
        }
		" : @"
		public static explicit operator Size(Double.Size value)
        {
            return new Size((" + @type + @")value.Width, (" + @type + @")value.Height, (" + @type + @")value.Depth);
        }
		" #>
		<#=	@type == "int" ? @"
		public static explicit operator Size(Single.Size value)
        {
            return new Size((" + @type + @")value.Width, (" + @type + @")value.Height, (" + @type + @")value.Depth);
        }
		" : @"
		public static implicit operator Size(Integer.Size value)
        {
            return new Size(value.Width, value.Height, value.Depth);
        }
		" #>
        #endregion
    }
}
<#+
    }  
#>
