<#@ template language="C#" hostspecific="True" #>
<#
    GenerateStart("Single",  "float");
  	SaveOutput("Single/Transform.cs");  
    
    GenerateStart("Double",  "double");
    SaveOutput("Double/Transform.cs");   

    GenerateStart("Integer",  "int");
    SaveOutput("Integer/Transform.cs");    
#>
<#+
  void SaveOutput(string outputFileName)
  {
      string templateDirectory = System.IO.Path.GetDirectoryName(Host.TemplateFile);
      string outputFilePath = System.IO.Path.Combine(templateDirectory, outputFileName);
      System.IO.File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
      this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
  }
#>
<#+
    void GenerateStart(string @namespace, string @type)
    {
#>
// 
//  Transform.cs (generated by template)
//  
//  Author:
//       Anders Frisk <andersfrisk77@gmail.com>
//  
//  Copyright (c) 2011 Anders Frisk
// 
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU Lesser General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
// 
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU Lesser General Public License for more details.
// 
//  You should have received a copy of the GNU Lesser General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.

using System;
using Kean.Extension;

namespace Kean.Math.Geometry3D.<#= @namespace #>
{
    public struct Transform :
		IEquatable<Transform>
    {
		public <#= @type #> A;
		public <#= @type #> B;
		public <#= @type #> C;
		public <#= @type #> D;
		public <#= @type #> E;
		public <#= @type #> F;
		public <#= @type #> G;
		public <#= @type #> H;
		public <#= @type #> I;
		public <#= @type #> J;
		public <#= @type #> K;
		public <#= @type #> L;
        public Transform(<#= @type #> a, <#= @type #> b, <#= @type #> c, <#= @type #> d, <#= @type #> e, <#= @type #> f, <#= @type #> g, <#= @type #> h, <#= @type #> i, <#= @type #> j, <#= @type #> k, <#= @type #> l) 
	    {
			this.A = a;
			this.B = b;
			this.C = c;
			this.D = d;
			this.E = e;
			this.F = f;
			this.G = g;
			this.H = h;
			this.I = i;
			this.J = j;
			this.K = k;
			this.L = l;
		}
		public <#= @type #> this[int x, int y]
		{
			get
			{
				<#= @type #> result;
				switch (x)
				{
					case 0:
						switch (y)
						{
							case 0: result = this.A; break;
							case 1: result = this.B; break;
							case 2: result = this.C; break;
							case 3: result = 0; break;
							default: throw new System.Exception(); // TODO: create new exception
						}
						break;
					case 1:
						switch (y)
						{
							case 0: result = this.D; break;
							case 1: result = this.E; break;
							case 2: result = this.F; break;
							case 3: result = 0; break;
							default: throw new System.Exception(); // TODO: create new exception
						}
						break;
					case 2:
						switch (y)
						{
							case 0: result = this.G; break;
							case 1: result = this.H; break;
							case 2: result = this.I; break;
							case 3: result = 0; break;
							default: throw new System.Exception(); // TODO: create new exception
						}
						break;
					case 3:
						switch (y)
						{
							case 0: result = this.J; break;
							case 1: result = this.K; break;
							case 2: result = this.L; break;
							case 3: result = 1; break;
							default: throw new System.Exception(); // TODO: create new exception
						}
						break;
					default: throw new System.Exception(); // TODO: create new exception
				}
				return result;
			}
		}
		#region Transform Properties
		public <#= @type #> ScalingX { get { return Math.<#= @namespace #>.SquareRoot((Math.<#= @namespace #>.Squared(this.A) + Math.<#= @namespace #>.Squared(this.B) + Math.<#= @namespace #>.Squared(this.C))); } }
		public <#= @type #> ScalingY { get { return Math.<#= @namespace #>.SquareRoot((Math.<#= @namespace #>.Squared(this.D) + Math.<#= @namespace #>.Squared(this.E) + Math.<#= @namespace #>.Squared(this.F))); } }
		public <#= @type #> ScalingZ { get { return Math.<#= @namespace #>.SquareRoot((Math.<#= @namespace #>.Squared(this.G) + Math.<#= @namespace #>.Squared(this.H) + Math.<#= @namespace #>.Squared(this.I))); } }
		public <#= @type #> Scaling { get { return (this.ScalingX + this.ScalingY + this.ScalingZ) / 3; } }
		public Size Translation { get { return new Size(this.J, this.K, this.L); } }
		#endregion
		public Transform Inverse
		{
			get
			{
				<#= @type #> determinant = this.A * (this.E * this.I - this.F * this.H) + this.D * (this.H * this.C - this.I * this.B) + this.G * (this.B * this.F - this.E * this.C);
				Transform result = new Transform()
				{
					A = (this.E * this.I - this.H * this.F) / determinant,
					B = (this.H * this.C - this.I * this.B) / determinant,
					C = (this.B * this.F - this.E * this.C) / determinant,
					D = (this.G * this.F - this.I * this.D) / determinant,
					E = (this.A * this.I - this.G * this.C) / determinant,
					F = (this.D * this.C - this.F * this.A) / determinant,
					G = (this.D * this.H - this.E * this.G) / determinant,
					H = (this.G * this.B - this.A * this.H) / determinant,
					I = (this.A * this.E - this.D * this.B) / determinant,
					J = new <#= @type #>(),
					K = new <#= @type #>(),
					L = new <#= @type #>()
				};
				Transform translation = result * Transform.CreateTranslation(this.J, this.K, this.L);
				result.J = -translation.J;
				result.K = -translation.K;
				result.L = -translation.L;
				return result;
			}
		}
		#region Manipulations
		public Transform Translate(<#= @type #> delta)
		{
			return this.Translate(delta, delta, delta);
		}
		public Transform Translate(Size delta)
		{
			return this.Translate(delta.Width, delta.Height, delta.Depth);
		}
		public Transform Translate(<#= @type #> xDelta, <#= @type #> yDelta, <#= @type #> zDelta)
		{
			return Transform.CreateTranslation(xDelta, yDelta, zDelta) * this;
		}
		public Transform Scale(<#= @type #> factor)
		{
			return this.Scale(factor, factor, factor);
		}
		public Transform Scale(Size factor)
		{
			return this.Scale(factor.Width, factor.Height, factor.Depth);
		}
		public Transform Scale(<#= @type #> xFactor, <#= @type #> yFactor, <#= @type #> zFactor)
		{
			return Transform.CreateScaling(xFactor, yFactor, zFactor) * this;
		}
		public Transform RotateX(<#= @type #> angle)
		{
			return Transform.CreateRotationX(angle) * this;
		}
		public Transform RotateY(<#= @type #> angle)
		{
			return Transform.CreateRotationY(angle) * this;
		}
		public Transform RotateZ(<#= @type #> angle)
		{
			return Transform.CreateRotationZ(angle) * this;
		}
		public Transform ReflectX()
		{
			return Transform.CreateReflectionX() * this;
		}
		public Transform ReflectY()
		{
			return Transform.CreateReflectionY() * this;
		}
		public Transform ReflectZ()
		{
			return Transform.CreateReflectionZ() * this;
		}
		#endregion
		#region Object Overrides
		public override bool Equals(object other)
		{
			return (other is Transform) && this.Equals((Transform)other);
		}
        public override int GetHashCode()
        {
            return (33* (33* (33* (33* (33 * (33 * (33 * (33 * this.A.GetHashCode() ^ this.B.GetHashCode()) ^ this.C.GetHashCode()) ^ this.D.GetHashCode()) ^ this.E.GetHashCode()) ^ this.F.GetHashCode())  ^ this.I.GetHashCode())  ^ this.J.GetHashCode()) ^ this.K.GetHashCode()) ^ this.F.GetHashCode() ;
        }
		public override string ToString()
		{
            return
                Kean.Math.<#= @namespace #>.ToString(this.A) + ", " +
                Kean.Math.<#= @namespace #>.ToString(this.B) + ", " +
                Kean.Math.<#= @namespace #>.ToString(this.C) + ", " +
                Kean.Math.<#= @namespace #>.ToString(this.D) + ", " +
                Kean.Math.<#= @namespace #>.ToString(this.E) + ", " +
                Kean.Math.<#= @namespace #>.ToString(this.F) + ", " +
                Kean.Math.<#= @namespace #>.ToString(this.G) + ", " +
                Kean.Math.<#= @namespace #>.ToString(this.H) + ", " +
                Kean.Math.<#= @namespace #>.ToString(this.I) + ", " +
                Kean.Math.<#= @namespace #>.ToString(this.J) + ", " +
                Kean.Math.<#= @namespace #>.ToString(this.K) + ", " +
                Kean.Math.<#= @namespace #>.ToString(this.L);
		}
		#endregion
		#region IEquatable<Transform> Members
		public bool Equals(Transform other)
		{
			return this.A == other.A && this.B == other.B && this.C == other.C && this.D == other.D && this.E == other.E && this.F == other.F && this.G == other.G && this.H == other.H && this.I == other.I && this.J == other.J && this.K == other.K && this.L == other.L;
		}
		#endregion
		#region Comparison Operators
		public static bool operator ==(Transform left, Transform right)
        {
			return left.Equals(right);
        }
		 public static bool operator !=(Transform left, Transform right)
        {
            return !(left == right);
        }
		#endregion
		#region Static Creators
		public static Transform Identity
		{
			get
			{
				<#= @type #> zero = 0;
				<#= @type #> one = 1;
				return new Transform() { A = one, B = zero, C = zero, D = zero, E = one, F = zero, G = zero, H = zero, I = one, J = zero, K = zero, L = zero };
			}
		}
		public static Transform CreateTranslation(Size delta)
		{
			return Transform.CreateTranslation(delta.Width, delta.Height, delta.Depth);
		}
		public static Transform CreateTranslation(<#= @type #> xDelta, <#= @type #> yDelta, <#= @type #> zDelta)
		{
			<#= @type #> zero = 0;
			<#= @type #> one = 1;
			return new Transform() { A = one, B = zero, C = zero, D = zero, E = one, F = zero, G = zero, H = zero, I = one, J = xDelta, K = yDelta, L = zDelta };
		}
		public static Transform CreateScaling(<#= @type #> xFactor, <#= @type #> yFactor, <#= @type #> zFactor)
		{
			<#= @type #> zero = 0;
			return new Transform() { A = xFactor, B = zero, C = zero, D = zero, E = yFactor, F = zero, G = zero, H = zero, I = zFactor, J = zero, K = zero, L = zero };
		}
		public static Transform CreateRotationX(<#= @type #> angle)
		{
			<#= @type #> zero = 0;
			<#= @type #> one = 1;
			return new Transform() { A = one, B = zero, C = zero, D = zero, E = Math.<#= @namespace #>.Cosinus(angle), F = Math.<#= @namespace #>.Sinus(angle), G = zero, H = Math.<#= @namespace #>.Sinus(- (angle)), I = Math.<#= @namespace #>.Cosinus(angle), J = zero, K = zero, L = zero };
		}
		public static Transform CreateRotationY(<#= @type #> angle)
		{
			<#= @type #> zero = 0;
			<#= @type #> one = 1;
			return new Transform() { A = Math.<#= @namespace #>.Cosinus(angle), B = zero, C = Math.<#= @namespace #>.Sinus(angle), D = zero, E = one, F = zero, G = Math.<#= @namespace #>.Sinus(-(angle)), H = zero, I = Math.<#= @namespace #>.Cosinus(angle), J = zero, K = zero, L = zero };
		}
		public static Transform CreateRotationZ(<#= @type #> angle)
		{
			<#= @type #> zero = 0;
			<#= @type #> one = 1;
			return new Transform() { A = Math.<#= @namespace #>.Cosinus(angle), B = Math.<#= @namespace #>.Sinus(angle), C = zero, D = Math.<#= @namespace #>.Sinus(-(angle)), E = Math.<#= @namespace #>.Cosinus(angle), F = zero, G = zero, H = zero, I = one, J = zero, K = zero, L = zero };
		}
		public static Transform CreateReflectionX()
		{
			<#= @type #> zero = 0;
			<#= @type #> one = 1;
			return new Transform() { A = -one, B = zero, C = zero, D = zero, E = one, F = zero, G = zero, H = zero, I = one, J = zero, K = zero, L = zero };
		}
		public static Transform CreateReflectionY()
		{
			<#= @type #> zero = 0;
			<#= @type #> one = 1;
			return new Transform() { A = one, B = zero, C = zero, D = zero, E = -one, F = zero, G = zero, H = zero, I = one, J = zero, K = zero, L = zero };
		}
		public static Transform CreateReflectionZ()
		{
			<#= @type #> zero = 0;
			<#= @type #> one = 1;
			return new Transform() { A = one, B = zero, C = zero, D = zero, E = one, F = zero, G = zero, H = zero, I = -one, J = zero, K = zero, L = zero };
		}
		public static Transform Create(<#= @type #> a, <#= @type #> b, <#= @type #> c, <#= @type #> d, <#= @type #> e, <#= @type #> f, <#= @type #> g, <#= @type #> h, <#= @type #> i, <#= @type #> j, <#= @type #> k, <#= @type #> l)
		{
			return new Transform() { A = a, B = b, C = c, D = d, E = e, F = f, G = g, H = h, I = i, J = j, K = k, L = l };
		}
		#endregion
		#region Arithmetic Operators
		public static Transform operator *(Transform left, Transform right)
		{
			return new Transform()
			{
				A = left.A * right.A + left.D * right.B + left.G * right.C,
				B = left.B * right.A + left.E * right.B + left.H * right.C,
				C = left.C * right.A + left.F * right.B + left.I * right.C,
				D = left.A * right.D + left.D * right.E + left.G * right.F,
				E = left.B * right.D + left.E * right.E + left.H * right.F,
				F = left.C * right.D + left.F * right.E + left.I * right.F,
				G = left.A * right.G + left.D * right.H + left.G * right.I,
				H = left.B * right.G + left.E * right.H + left.H * right.I,
				I = left.C * right.G + left.F * right.H + left.I * right.I,
				J = left.A * right.J + left.D * right.K + left.G * right.L + left.J,
				K = left.B * right.J + left.E * right.K + left.H * right.L + left.K,
				L = left.C * right.J + left.F * right.K + left.I * right.L + left.L,
			};
		}
		#endregion
        #region Casts
		public static implicit operator Transform(string value)
        {
            Transform result = new Transform();
            if (value.NotEmpty())
            {

                try
                {
                    string[] values = value.Split(new char[] { ',', ' ', ';' }, StringSplitOptions.RemoveEmptyEntries);
                    if (values.Length == 12)
                        result = new Transform(
                            Kean.Math.<#= @namespace #>.Parse(values[0]), Kean.Math.<#= @namespace #>.Parse(values[1]), Kean.Math.<#= @namespace #>.Parse(values[2]),
                            Kean.Math.<#= @namespace #>.Parse(values[3]), Kean.Math.<#= @namespace #>.Parse(values[4]), Kean.Math.<#= @namespace #>.Parse(values[5]),
                            Kean.Math.<#= @namespace #>.Parse(values[6]), Kean.Math.<#= @namespace #>.Parse(values[7]), Kean.Math.<#= @namespace #>.Parse(values[8]),
                            Kean.Math.<#= @namespace #>.Parse(values[9]), Kean.Math.<#= @namespace #>.Parse(values[10]), Kean.Math.<#= @namespace #>.Parse(values[11]));
                }
                catch
                {
                }
            }
            return result;
        }
		public static explicit operator <#= @type #>[,](Transform value)
        {
            return new <#= @type #>[,] { 
						{ value[0, 0], value[0, 1], value[0, 2], value[0, 3] }, 
						{ value[1, 0], value[1, 1], value[1, 2], value[1, 3] }, 
						{ value[2, 0], value[2, 1], value[2, 2], value[2, 3] }, 
						{ value[3, 0], value[3, 1], value[3, 2], value[3, 3] }};
        }
        public static implicit operator string(Transform value)
        {
            return value.NotNull() ? value.ToString() : null;
        }
<#=	@type == "float" ? @"
		public static implicit operator Transform(Integer.Transform value)
        {
            return new Transform(value.A, value.B, value.C, value.D, value.E, value.F, value.G, value.H, value.I, value.J, value.K, value.L);
        }
        public static explicit operator Integer.Transform(Transform value)
        {
            return new Integer.Transform((int)value.A, (int)value.B, (int)value.C, (int)value.D, (int)value.E, (int)value.F, (int)value.G, (int)value.H, (int)value.I, (int)value.J, (int)value.K, (int)value.L);
        }
		" : ""	#>
		<#=	@type == "double" ? @"
		public static implicit operator Transform(Integer.Transform value)
        {
            return new Transform(value.A, value.B, value.C, value.D, value.E, value.F, value.G, value.H, value.I, value.J, value.K, value.L);
        }
        public static explicit operator Integer.Transform(Transform value)
        {
            return new Integer.Transform((int)value.A, (int)value.B, (int)value.C, (int)value.D, (int)value.E, (int)value.F, (int)value.G, (int)value.H, (int)value.I, (int)value.J, (int)value.K, (int)value.L);
        }
		" : "" #>
        #endregion
    }
}
<#+
    }  
#>
