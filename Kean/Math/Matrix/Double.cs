// 
//  Double.cs (generated by template)
//  
//  Author:
//       Anders Frisk <andersfrisk77@gmail.com>
//  
//  Copyright (c) 2011 Anders Frisk
// 
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU Lesser General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
// 
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU Lesser General Public License for more details.
// 
//  You should have received a copy of the GNU Lesser General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
using System;
using Geometry2D = Kean.Math.Geometry2D;
using Kean.Extension;
namespace Kean.Math.Matrix
{
    public class Double :
        System.IEquatable<Double>
    {
        #region Properties
        Geometry2D.Integer.Size dimensions;
        public Geometry2D.Integer.Size Dimensions { get { return this.dimensions; } private set { this.dimensions = value; } }
        // Matrix elements are supposed to be in column major order 
        /// <summary>
        /// True if the matrix is a square matrix.
        /// </summary>
        public bool IsSquare { get { return this.Dimensions.Width == this.Dimensions.Height; } }
        /// <summary>
        /// Minimum of maxtrix dimensions.
        /// </summary>
        public int Order { get { return Kean.Math.Integer.Minimum(this.Dimensions.Width, this.Dimensions.Height); } }
        /// <summary>
        /// Frobenius norm of matrix
        /// </summary>
        public double Norm { get { return Kean.Math.Double.SquareRoot(this.ScalarProduct(this)); } }
        public double NormInfinity
        {
            get
            {
                double result = 0;
                for (int x = 0; x < this.Dimensions.Width; x++)
                    for (int y = 0; y < this.Dimensions.Height; y++)
                        result = Kean.Math.Double.Maximum(result, Kean.Math.Double.Absolute(this[x, y]));
                return result;
            }
        }
        /// <summary>
        /// Return true if the current matrix is a diagonal matrix within the specified tolerance.
        /// </summary>
        /// <param name="tolerance">Tolerance used to check zero elements outside the diagonal.</param>
        /// <returns>True is the matrix is a diagonal matrix within the given tolerance.</returns>
        public bool IsDiagonal(float tolerance)
        {
            bool result = true;
            for (int x = 0; x < this.Dimensions.Width; x++)
                for (int y = 0; y < this.Dimensions.Height; y++)
                {
                    if (x != y && Kean.Math.Double.Absolute(this[x, y]) > tolerance)
                    {
                        result = false;
                        x = this.Dimensions.Width;
                        break;
                    }
                }
            return result;
        }
        /// <summary>
        /// Trace of the current matrix.
        /// </summary>
        /// <returns>Return the trace of the current matrix.</returns>
        public double Trace
        {
            get
            {
                double result = 0;
                int order = this.Order;
                for (int i = 0; i < order; i++)
                    result += this[i, i];
                return result;
            }
        }
        public double Determinant
        {
            get
            {
                Double[] lup = this.LupDecomposition();
                double result = 1;
                for (int position = 0; position < lup[1].Dimensions.Height; position++)
                    result *= lup[1][position, position];
                return result * lup[2].Sign();
            }
        }
        /// <summary>
        /// Get or set an element in a matrix at position(x,y).
        /// </summary>
        /// <param name="x">Column number of a matrix.</param>
        /// <param name="y">Row number of a matrix.</param>
        /// <returns></returns>
        public double this[int x, int y]
        {
            get { return this.elements[this.Index(x, y)]; }
            set { this.elements[this.Index(x, y)] = value; }
        }
        int Index(int x, int y)
        {
            return x * this.Dimensions.Height + y; // Column major order 
            // Use Y * this.Dimensions.Width + X for row major order
        }
        #endregion
        #region Private Fields
        double[] elements;
        #endregion
        #region Constructors
        public Double() : this(0) { }
        public Double(int order) : this(order, order) { }
        public Double(int width, int height) : this(new Geometry2D.Integer.Size(width, height)) { }
        public Double(Geometry2D.Integer.Size dimensions) : this(dimensions, new double[dimensions.Area]) { }
        public Double(int width, int height, double[] elements) : this(new Geometry2D.Integer.Size(width, height), elements) { }
        public Double(Geometry2D.Integer.Size dimensions, double[] elements)
        {
            this.Dimensions = dimensions;
            int minimum = Kean.Math.Integer.Minimum(elements.Length, this.Dimensions.Area);
            this.elements = new double[this.Dimensions.Area];
            Array.Copy(elements, 0, this.elements, 0, minimum);
        }
        #endregion
        #region Matrix Geometry
        /// <summary>
        /// Distance induced by the Frobenius norm.
        /// </summary>
        /// <param name="other">Other matrix.</param>
        /// <returns>Distance between current and other matrix.</returns>
        public double Distance(Double other)
        {
            return (this - other).Norm;
        }
        public double ScalarProduct(Double other)
        {
            if (this.Dimensions != other.Dimensions)
                new Exception.InvalidDimensions();
            double result = 0;
            for (int x = 0; x < this.Dimensions.Width; x++)
                for (int y = 0; y < this.Dimensions.Height; y++)
                    result += this[x, y] * other[x, y];
            return result;
        }
        #endregion
        #region Static Arithmetic: Matrix and Scalar Operators
        /// <summary>
        /// Addition of matrices.
        /// </summary>
        /// <param name="left">Left matrix in the addition.</param>
        /// <param name="right">Right matrix in the addition.</param>
        /// <returns>Sum of left and right matrices.</returns>
        public static Double operator +(Double left, Double right)
        {
            if (left.Dimensions != right.Dimensions)
                new Exception.InvalidDimensions();
            Double result = new Double(left.Dimensions);
            for (int i = 0; i < result.elements.Length; i++)
                result.elements[i] = left.elements[i] + right.elements[i];
            return result;
        }
        /// <summary>
        /// Multiplication of matrices.
        /// </summary>
        /// <param name="left">Left matrix in the multiplication.</param>
        /// <param name="right">Right matrix in the multiplication.</param>
        /// <returns>Product of left and right matrices.</returns>
        public static Double operator *(Double left, Double right)
        {
            if (left.Dimensions.Width != right.Dimensions.Height)
                new Exception.InvalidDimensions();
            Double result = new Double(right.Dimensions.Width, left.Dimensions.Height);
            for (int x = 0; x < right.Dimensions.Width; x++)
                for (int y = 0; y < left.Dimensions.Height; y++)
                    for (int z = 0; z < left.Dimensions.Width; z++)
                        result[x, y] = result[x, y] + left[z, y] * right[x, z];
            return result;
        }
        /// Difference between matrices.
        /// </summary>
        /// <param name="left">Left matrix in the differerence.</param>
        /// <param name="right">Right matrix in the differerence.</param>
        /// <returns>Difference of left and right matrices.</returns>
        public static Double operator -(Double left, Double right)
        {
            if (left.Dimensions != right.Dimensions)
                new Exception.InvalidDimensions();
            Double result = new Double(left.Dimensions);
            for (int i = 0; i < result.elements.Length; i++)
                result.elements[i] = left.elements[i] - right.elements[i];
            return result;

        }
        /// <summary>
        /// Multiplication between scalar and matrix.
        /// </summary>
        /// <param name="left">Left scalar in the multiplication.</param>
        /// <param name="right">Right matrix in the multiplication.</param>
        /// <returns>Product of scalar and matrix.</returns>
        public static Double operator *(double left, Double right)
        {
            Double result = new Double(right.Dimensions);
            for (int i = 0; i < result.elements.Length; i++)
                result.elements[i] = left * right.elements[i];
            return result;
        }
        /// <summary>
        /// Multiplication between scalar and matrix.
        /// </summary>
        /// <param name="left">Left matrix in the multiplication.</param>
        /// <param name="right">Right scalar in the multiplication.</param>
        /// <returns>Product of matrix and  scalar.</returns>
        public static Double operator *(Double left, double right)
        {
            return right * left;
        }
        /// <summary>
        /// Division between scalar and matrix.
        /// </summary>
        /// <param name="left">Left matrix in the multiplication.</param>
        /// <param name="right">Right scalar in the multiplication.</param>
        /// <returns>Quotient between matrix and scalar.</returns>
        public static Double operator /(Double left, double right)
        {
            return left * (1 / right);
        }
        /// <summary>
        /// Negation of a matrix.
        /// </summary>
        /// <param name="value">Matrix to be negated.</param>
        /// <returns>Negated matrix.</returns>
        public static Double operator -(Double value)
        {
            return (-1) * value;
        }
        #endregion
        #region Matrix Methods
        /// <summary>
        /// Tranpose matrix. Creates a new matrix being the transpose of the current matrix.
        /// </summary>
        /// <returns>Return current matrix tranposed.</returns>
        public Double Transpose()
        {
            Double result = new Double(this.Dimensions.Height, this.Dimensions.Width);
            for (int x = 0; x < result.Dimensions.Width; x++)
                for (int y = 0; y < result.Dimensions.Height; y++)
                    result[x, y] = this[y, x];
            return result;
        }
        /// <summary>
        /// Adjoint matrix. Creates a new matrix which is the adjoint of the current matrix.
        /// </summary>
        /// <returns>Adjoint of current matrix.</returns>
        public Double Adjoint()
        {
            Double result = new Double(this.Dimensions.Width, this.Dimensions.Height);
            for (int x = 0; x < result.Dimensions.Width; x++)
                for (int y = 0; y < result.Dimensions.Height; y++)
                    result[x, y] = Kean.Math.Double.Power(-1, x + 1 + y + 1) * this.Minor(y, x).Determinant;
            return result;

        }
        /// <summary>
        /// Minor of the current matrix.
        /// </summary>
        /// <param name="x">Column position in the matrix.</param>
        /// <param name="y">Row position in the matrix.</param>
        /// <returns>Return the minor of a matrix at position (x,y).</returns>
        public Double Minor(int x, int y)
        {
            if (this.Dimensions.Width < 1 || this.Dimensions.Height < 1)
                new Exception.InvalidDimensions();
            Double result = new Double(this.Dimensions.Width - 1, this.Dimensions.Height - 1);
            for (int xx = 0; xx < x; xx++)
            {
                for (int yy = 0; yy < y; yy++)
                    result[xx, yy] = this[xx, yy];
                for (int yy = y + 1; yy < this.Dimensions.Height; yy++)
                    result[xx, yy - 1] = this[xx, yy];
            }
            for (int xx = x + 1; xx < this.Dimensions.Width; xx++)
            {
                for (int yy = 0; yy < y; yy++)
                    result[xx - 1, yy] = this[xx, yy];
                for (int yy = y + 1; yy < this.Dimensions.Height; yy++)
                    result[xx - 1, yy - 1] = this[xx, yy];
            }
            return result;
        }
        /// <summary>
        /// Platformct the submatrix being the rectangular part of current matrix with top left corner (x,y).
        /// </summary>
        /// <param name="left">Column position.</param>
        /// <param name="top">Row position.</param>
        /// <returns>Return the extract submatrix with top left corner (x,y).</returns>
        public Double Extract(int left, int top)
        {
            return this.Extract(left, this.Dimensions.Width, top, this.Dimensions.Height);
        }
        public Double Extract(int left, int right, int top, int bottom)
        {
            if (
                left < 0 || left > this.Dimensions.Width ||
                right < 0 || right > this.Dimensions.Width ||
                top < 0 || top > this.Dimensions.Height ||
                bottom < 0 || bottom > this.Dimensions.Height)
                throw new Exception.InvalidDimensions();
            Double result = new Double(right - left, bottom - top);
            for (int x = left; x < right; x++)
                for (int y = top; y < bottom; y++)
                    result[x - left, y - top] = this[x, y];
            return result;
        }
        /// <summary>
        /// Paste a submatrix into a copy of the current matrix. The submatrix is pasted a position top left corner
        /// (x,y).
        /// </summary>
        /// <param name="x">Column position.</param>
        /// <param name="y">Row position.</param>
        /// <param name="submatrix">Matrix to be pasted into current matrix.</param>
        /// <returns>Return new matrix with submatrix pasted.</returns>
        public Double Paste(int left, int top, Double submatrix)
        {
            if (
                left < 0 || left > this.Dimensions.Width ||
                top < 0 || top > this.Dimensions.Height)
                throw new Exception.InvalidDimensions();
            Double result = this.Copy();
            for (int x = 0; x < submatrix.Dimensions.Width; x++)
                for (int y = 0; y < submatrix.Dimensions.Height; y++)
                    result[x + left, y + top] = submatrix[x, y];
            return result;
        }
        /// <summary>
        /// Paste a submatrix into a copy of the current matrix. The submatrix is pasted a position top left corner (x,y).
        /// This method does not create a new matrix but instead keeps the current matrix.
        /// </summary>
        /// <param name="left">Column position.</param>
        /// <param name="top">Row position.</param>
        /// <param name="submatrix">Matrix to paste into the current matrix.</param>
        public void Set(int left, int top, Double submatrix)
        {
            if (
                left < 0 || left > this.Dimensions.Width ||
                top < 0 || top > this.Dimensions.Height)
                throw new Exception.InvalidDimensions();
            for (int x = 0; x < submatrix.Dimensions.Width; x++)
                for (int y = 0; y < submatrix.Dimensions.Height; y++)
                    this[x + left, y + top] = submatrix[x, y];
        }
        /// <summary>
        /// Sets a region in a matrix to zero.
        /// </summary>
        /// <param name="left"></param>
        /// <param name="right"></param>
        /// <param name="top"></param>
        /// <param name="bottom"></param>
        public void Clear(int left, int right, int top, int bottom)
        {
            if (
                left < 0 || left > this.Dimensions.Width ||
                right < 0 || right > this.Dimensions.Width ||
                top < 0 || top > this.Dimensions.Height ||
                bottom < 0 || bottom > this.Dimensions.Height)
                throw new Exception.InvalidDimensions();
            for (int x = left; x < right; x++)
                for (int y = top; y < bottom; y++)
                    this[x, y] = 0;
        }
        public void Clear()
        {
            for (int x = 0; x < this.Dimensions.Width; x++)
                for (int y = 0; y < this.Dimensions.Height; y++)
                    this[x, y] = 0;
        }
        /// <summary>
        /// Creates a copy of the current matrix.
        /// </summary>
        /// <returns>Return a copy of the current matrix.</returns>
        public Double Copy()
        {
            Double result = new Double(this.Dimensions);
            Array.Copy(this.elements, result.elements, this.elements.Length);
            return result;
        }
        public Double Kronecker(Double other)
        {
            Double[,] blocks = new Double[this.Dimensions.Width, this.Dimensions.Height];
            for (int x = 0; x < this.Dimensions.Width; x++)
                for (int y = 0; y < this.Dimensions.Height; y++)
                    blocks[x, y] = this[x, y] * other;
            return Double.Block(blocks);
        }
        #endregion
        #region Cholesky Methods
        /// <summary>
        /// Gaxby (Algorithm 4.2.1 p.144) Cholesky factorization of positive symmetric matrix. A = C * C'.  The matrix C is lower triangular.
        /// </summary>
        /// <returns> Cholesky factorization matix.</returns>
        public Double Cholesky()
        {
            if (!this.IsSquare)
                new Exception.InvalidDimensions();
            int order = this.Dimensions.Width;
            Double result = this.Copy();
            try
            {
                for (int j = 0; j < order; j++)
                {
                    if (j > 0)
                        result.Set(j, j, result.Extract(j, j + 1, j, order) - result.Extract(0, j, j, order) * result.Extract(0, j, j, j + 1).Transpose());
                    double value = result[j, j];
                    if (value <= 0)
                        throw new Exception.NonPositive();
                    result.Set(j, j, result.Extract(j, j + 1, j, order) / Kean.Math.Double.SquareRoot(value));
                }
                for (int y = 0; y < order; y++)
                    for (int x = y + 1; x < order; x++)
                        result[x, y] = 0;
            }
            catch (Kean.Error.Exception)
            {
                result = null;
            }
            return result;
        }
        /// <summary>
        /// Cholesky least square solver A * x = y. See http://en.wikipedia.org/wiki/Cholesky_decomposition
        /// The current matrix determines the matrix A above.
        /// </summary>
        /// <param name="y">The right hand column y vector of the equation system.</param>
        /// <returns>Return the least square solution to the system,</returns>
        public Double SolveCholesky(Double y)
        {
            Double result = null;
            try
            {
                if (this.Dimensions.Height < this.Dimensions.Width)
                {
                    // Least norm
                    Double transpose = this.Transpose();
                    Double lower = (this * transpose).Cholesky();
                    Double z = y.ForwardSubstitution(lower);
                    z = z.BackwardSubstitution(lower.Transpose());
                    result = transpose * z;
                }
                else
                {
                    // Standard
                    Double transpose = this.Transpose();
                    Double lower = (transpose * this).Cholesky();
                    Double z = (transpose * y).ForwardSubstitution(lower);
                    result = z.BackwardSubstitution(lower.Transpose());
                }
            }
            catch (Kean.Error.Exception)
            {
            }
            return result;
        }
        #endregion
        #region QR methods
        /// <summary>
        /// QR least square solver A * x = y. See http://en.wikipedia.org/wiki/QR_decomposition
        /// The current matrix determines the matrix A above.
        /// </summary>
        /// <param name="y">The right hand column y vector of the equation system.</param>
        /// <returns>Return the least square solution to the system,</returns>
        public Double SolveQr(Double y)
        {
            Double result = null;
            try
            {
                if (this.Dimensions.Height < this.Dimensions.Width)
                {
                    // Least norm
                    Double transpose = this.Transpose();
                    Double[] qr = transpose.QRFactorization();
                    Double q = qr[0].Extract(0, transpose.Dimensions.Width, 0, transpose.Dimensions.Height);
                    Double r = qr[1].Extract(0, transpose.Dimensions.Width, 0, transpose.Dimensions.Width);
                    Double z = y.ForwardSubstitution(r.Transpose());
                    result = q * z;
                }
                else
                {
                    // Standard
                    Double[] qr = this.QRFactorization();
                    Double q = qr[0].Extract(0, this.Dimensions.Width, 0, this.Dimensions.Height);
                    Double r = qr[1].Extract(0, this.Dimensions.Width, 0, this.Dimensions.Width);
                    result = (q.Transpose() * y).BackwardSubstitution(r);
                }
            }
            catch (Kean.Error.Exception)
            {
            }
            return result;
        }
        /// <summary>
        /// QR factorizion of the current matrix. See http://en.wikipedia.org/wiki/QR_decomposition
        /// Recall that A = QR.
        /// </summary>
        /// <returns>Return the QR-factorization array with Q = [0] and R = [1]. </returns>
        public Double[] QRFactorization()
        {
            int order = this.Dimensions.Height;
            int iterations = Kean.Math.Integer.Minimum(this.Dimensions.Height - 1, this.Dimensions.Width);
            Double r = this;
            Double q = Double.Identity(order);
            for (int i = 0; i < iterations; i++)
            {
                Double x = r.Extract(i, i + 1, i, r.Dimensions.Height);
                Double y = (Kean.Math.Double.Sign(x[0, 0]) * x.Norm) * Double.Basis(r.Dimensions.Height - i, 0);
                Double qi = Double.Identity(order).Paste(i, i, Double.HouseHolder(x, y));
                r = qi * r;
                q *= qi.Transpose();
            }
            return new Double[] { q, r };
        }
        // Contruct Householder transform from two  column vectors of same length and norm.
        static Double HouseHolder(Double x, Double y)
        {
            if (x.Dimensions.Width != y.Dimensions.Width && x.Dimensions.Width != 1 && x.Dimensions.Height != y.Dimensions.Height)
                throw new Exception.InvalidDimensions();
            int length = x.Dimensions.Height;
            Double w = x - y;
            double norm = w.Norm;
            Double result = Double.Identity(length);
            if (norm != 0)
            {
                w /= norm;
                result -= 2 * w * w.Transpose();
            }
            return result;
        }
        /// <summary>
        /// Eigenvalue decomposition of a symmetric square matrix.
        /// a = u * d * u.Transpose();
        /// </summary>
        /// <returns>Array of matrices {u, d}.</returns>
        public Double[] Eigenvalues()
        {
            if (!this.IsSquare)
                new Exception.InvalidDimensions();
            int order = this.Dimensions.Width;
            double tolerance = (double)1e-5;
            int iterations = 100;
            Double u = this;
            Double q = Double.Identity(order);
            int i = 0;
            double error = double.MaxValue;
            while (error > tolerance && i < iterations)
            {
                Double[] qr = u.QRFactorization();
                u = qr[0].Transpose() * u * qr[0];
                q *= qr[0];
                error = 0;
                for (int j = 0; j < order; j++)
                    for (int k = 0; k < order; k++)
                        error += j != k ? Kean.Math.Double.Absolute(u[j, k]) : 0;
                i++;
            }
            return new Double[] { q, u };
        }
        #endregion
        #region Diagonalization
        /// <summary>
        /// See Algorithm 5.4.2 (Householder Bidiagonalization).
        /// Computation of the Householder bidiagonalization of current matrix. Note height >= width.
        /// The method return {u, y, v}, where u,v are orthogonal matrices such that u' * current * v = y,
        /// where y is a bidiagonal matrix with a posssibly nonzero superdiagonal.
        /// </summary>
        /// <returns>Array of matrices {u,y,v}.</returns>
        Double[] BiDiagonalization()
        {
            Double[] result;
            Double b = this.Copy();
            int n = b.Dimensions.Width;
            int m = b.Dimensions.Height;
            Double[] leftHouseholder = new Double[n];
            Double[] rightHouseholder = null;
            if (n - 2 >= 1)
                rightHouseholder = new Double[n - 2];

            for (int j = 0; j < n; j++)
            {
                Tuple<Double, double> leftHousePair = b.Extract(j, j + 1, j, m).House();
                Double leftHouseMultiplier = Double.Identity(m - j) - leftHousePair.Item2 * leftHousePair.Item1 * leftHousePair.Item1.Transpose();
                leftHouseholder[j] = leftHouseMultiplier;
                b.Set(j, j, leftHouseMultiplier * b.Extract(j, j));
                if (j < n - 2)
                {
                    Tuple<Double, double> rightHousePair = b.Extract(j + 1, n, j, j + 1).Transpose().House();
                    Double rightHouseMultiplier = Double.Identity(n - j - 1) - rightHousePair.Item2 * rightHousePair.Item1 * rightHousePair.Item1.Transpose();
                    rightHouseholder[j] = rightHouseMultiplier;
                    b.Set(j + 1, j, b.Extract(j + 1, j) * rightHouseMultiplier);
                }
            }
            Double u = Double.Identity(m);
            for (int j = n - 1; j >= 0; j--)
                u.Set(j, j, leftHouseholder[j] * u.Extract(j, j));
            Double v = Double.Identity(n);
            for (int j = n - 3; j >= 0; j--)
                v.Set(j + 1, j + 1, rightHouseholder[j] * v.Extract(j + 1, j + 1));
            result = new Double[] { u, b, v };
            return result;

        }
        /// <summary>
        /// See Algorithm 5.1.1 (Householder Vector).
        /// </summary>
        /// <returns></returns>
        Tuple<Double, double> House()
        {
            Tuple<Double, double> result;
            int n = this.Dimensions.Height;
            Double tail = this.Extract(0, 1, 1, n);
            double sigma = (tail.Transpose() * tail)[0, 0];
            Double nu = new Double(1, n);
            nu[0, 0] = 1;
            nu.Set(0, 1, tail);
            double beta = 0;
            if (sigma != 0)
            {
                double x00 = this[0, 0];
                double mu = Kean.Math.Double.SquareRoot(Kean.Math.Double.Squared(x00) + sigma);
                if (x00 <= 0)
                    nu[0, 0] = x00 - mu;
                else
                    nu[0, 0] = -sigma / (x00 + mu);
                double nu00Squared = Kean.Math.Double.Squared(nu[0, 0]);
                beta = 2 * nu00Squared / (sigma + nu00Squared);
                nu /= nu[0, 0];
            }
            result = Tuple.Create<Double, double>(nu, beta);
            return result;
        }
        #endregion
        #region Svd Methods
        /// <summary>
        /// Svd least square solver A * x = y. See http://en.wikipedia.org/wiki/Linear_least_squares_(mathematics).
        /// The current matrix determines the matrix A above.
        /// </summary>
        /// <param name="y">The right hand column y vector of the equation system.</param>
        /// <returns>Return the least square solution to the system,</returns>
        public Double SolveSvd(Double b)
        {
            Double result;
            Double[] usv = this.Svd();
            Double u = usv[0];
            Double s = usv[1];
            Double v = usv[2];
            Double sPlus = new Double(s.Dimensions.Width, s.Dimensions.Height);
            int order = s.Order;
            for (int i = 0; i < order; i++)
            {
                double value = s[i, i];
                if (value != 0)
                    sPlus[i, i] = 1 / value;
            }
            // Least square solution and minimum norm solution
            if (this.Dimensions.Height >= this.Dimensions.Width)
                result = v * sPlus * u.Transpose() * b;
            else
            {
                Double d = new Double(1, this.Dimensions.Width).Paste(0, 0, u.Transpose() * b);

                for (int i = 0; i < order; i++)
                    d[0, i] *= sPlus[i, i];
                result = v * d;
            }
            return result;
        }
        /// <summary>
        /// Returns the Svd decomposition of the current matrix. Recall A = U * S * V'.
        /// </summary>
        /// <returns>Return Svd decomposition U = [0], S = [1], V = [2].</returns>
        public Double[] Svd()
        {
            return this.Svd((double)1e-10);
        }
        /// <summary>
        /// Returns the Svd decomposition of the current matrix. Recall A = U * S * V'.
        /// </summary>
        /// <param name="tolerance">Tolerance used for accuracy of algorithm.</param>
        /// <returns>Return Svd decomposition U = [0], S = [1], V = [2].</returns>
        public Double[] Svd(double tolerance)
        {
            Double[] result;
            if (this.Dimensions.Height >= this.Dimensions.Width)
                result = this.SvdHelper(tolerance);
            else
            {
                result = this.Transpose().SvdHelper(tolerance);
                result = new Double[] { result[2], result[1].Transpose(), result[0] };
            }
            return result;
        }
        /// <summary>
        /// See Algorithm 8.6.2 (The SVD Algorithm).
        /// Returns the Svd decomposition of the current matrix. Recall A = U * S * V'.
        /// Height of matrix must be greater or equal to width.
        /// </summary>
        /// <param name="tolerance">Tolerance used for accuracy of algorithm.</param>
        /// <returns>Return Svd decomposition U = [0], S = [1], V = [2].</returns>
        Double[] SvdHelper(double tolerance)
        {
            Double[] result;
            int m = this.Dimensions.Height;
            int n = this.Dimensions.Width;
            if (m == 1 && n == 1)
                result = new Double[] { Double.Identity(1), this, Double.Identity(1) };
            else
            {
                Double[] ubv = this.BiDiagonalization();
                Double u = ubv[0];
                Double b = ubv[1]; //.Platformct(0, n, 0, n);
                Double v = ubv[2];
                int q = 0;
                while (q < n)
                {
                    for (int i = 0; i < n - 1; i++)
                        if (Kean.Math.Double.Absolute(b[i + 1, i]) < tolerance * (Kean.Math.Double.Absolute(b[i, i]) + Kean.Math.Double.Absolute(b[i + 1, i + 1])))
                            b[i + 1, i] = 0;
                    Double b22;
                    int p = 0;
                    q = 0;
                    int b22Order = 0;
                    int j = n - 1;
                    for (; j >= 1; j--)
                    {
                        if (Kean.Math.Double.Absolute(b[j, j - 1]) < tolerance)
                            q++;
                        else
                            break;
                    }
                    if (j == 0 && q > 0)
                        q++;
                    for (; j >= 1; j--)
                    {
                        if (Kean.Math.Double.Absolute(b[j, j - 1]) > tolerance)
                            b22Order++;
                        else
                            break;
                    }
                    if (b22Order > 0)
                        b22Order++;
                    p = n - b22Order - q;
                    if (b22Order == 0)
                        break;
                    if (q < n)
                    {
                        b22 = b.Extract(p, n - q, p, n - q);
                        bool zeros = false;
                        for (int i = 0; i < b22.Dimensions.Width; i++)
                            if (Kean.Math.Double.Absolute(b22[i, i]) < tolerance && Kean.Math.Double.Absolute(b22[i + 1, i]) > tolerance)
                            {
                                b22[i, i] = 0;
                                b22[i + 1, i] = 0;
                                zeros = true;
                            }
                        if (!zeros)
                        {
                            Double[] gkubv = b22.GolubKahanSvdStep();
                            Double uprime = Double.Diagonal(Double.Identity(p), gkubv[0], Double.Identity(q + m - n));
                            Double vprime = Double.Diagonal(Double.Identity(p), gkubv[2], Double.Identity(q));
                            u = u * uprime;
                            v = v * vprime;
                            b = uprime.Transpose() * b * vprime;
                        }
                    }


                }
                result = new Double[] { u, b, v };
            }
            return result;
        }
        /// <summary>
        /// See Algorithm 8.6.1 (Golub-Kahan SVD Step.)
        /// </summary>
        /// <returns></returns>
        Double[] GolubKahanSvdStep()
        {
            Double b = this.Copy();
            int m = b.Dimensions.Height;
            int n = b.Dimensions.Width;
            Double t = b.Transpose() * b;
            Double trail = t.Extract(n - 2, n, n - 2, n);
            double d = (trail[0, 0] - trail[1, 1]) / 2;
            double mu = trail[1, 1] + d - Kean.Math.Double.Sign(d) * Kean.Math.Double.SquareRoot(Kean.Math.Double.Squared(d) + Kean.Math.Double.Squared(trail[1, 0]));
            double y = t[0, 0] - mu;
            double z = t[1, 0];
            Double u = Double.Identity(m);
            Double v = Double.Identity(n);
            for (int k = 0; k < n - 1; k++)
            {
                double[] cs = Double.Givens(y, z);
                Double g = Double.GivensRotation(m, k, k + 1, cs[0], cs[1]);
                v = v * g;
                b = b * g;
                y = b[k, k];
                z = b[k, k + 1];
                cs = Double.Givens(y, z);
                g = Double.GivensRotation(n, k, k + 1, cs[0], cs[1]);
                b = g.Transpose() * b;
                u = u * g;
                if (k < n - 2)
                {
                    y = b[k + 1, k];
                    z = b[k + 2, k];
                }
            }
            return new Double[] { u, b, v };
        }
        /// <summary>
        /// Givens rotation. Creates an identity matrix of given order m and
        /// replace at positions (i,i) and (k,k) with c, 
        /// replace at positions (i,k)  -s and (k,i) with s,
        /// </summary>
        /// <param name="m">Order of matrix to be created.</param>
        /// <param name="i">First index.</param>
        /// <param name="k">Second index.</param>
        /// <param name="c">Value corresponding to a cosine value.</param>
        /// <param name="s">Value corresponding to a sine value.</param>
        /// <returns>Returns a Givens rotation.</returns>
        static Double GivensRotation(int m, int i, int k, double c, double s)
        {
            Double result = Double.Identity(m);
            result[i, i] = c;
            result[k, k] = c;
            result[k, i] = s;
            result[i, k] = -s;
            return result;
        }
        /// <summary>
        /// See Algorithm 5.1.3.
        /// </summary>
        /// <param name="a"></param>
        /// <param name="y"></param>
        /// <returns></returns>
        static double[] Givens(double a, double b)
        {
            double[] result = new double[2];
            double c, s;
            if (b == 0)
            {
                c = 1;
                s = 0;
            }
            else
            {
                if (Kean.Math.Double.Absolute(b) > Kean.Math.Double.Absolute(a))
                {
                    double tau = -a / b;
                    s = 1 / Kean.Math.Double.SquareRoot(1 + Kean.Math.Double.Squared(tau));
                    c = s * tau;
                }
                else
                {
                    double tau = -b / a;
                    c = 1 / Kean.Math.Double.SquareRoot(1 + Kean.Math.Double.Squared(tau));
                    s = c * tau;
                }
            }
            result[0] = c;
            result[1] = s;
            return result;
        }
        #endregion
        #region Lup Methods
        /// <summary>
        /// See http://en.wikipedia.org/wiki/LUP_decomposition.
        /// Lup decomposition of the current matrix. Recall that Lup decomposition is A = LUP, 
        /// where L is lower triangular, U is upper triangular, and P is a permutation matrix.
        /// </summary>
        /// <returns>Returns the Lup decomposition. L = [0], U = [1], P = [2].</returns>
        Double[] LupDecomposition()
        {
            if (!this.IsSquare)
                throw new Exception.InvalidDimensions();
            int order = this.Order;
            Double l = Double.Identity(order);
            Double u = this.Copy();
            Double p = Double.Identity(order);


            int last = order - 1;
            for (int position = 0; position < last; position++)
            {
                int pivotRow = position;
                for (int y = position + 1; y < u.Dimensions.Height; y++)
                    if (Kean.Math.Double.Absolute(u[position, position]) < Kean.Math.Double.Absolute(u[position, y]))
                        pivotRow = y;
                p.SwapRows(position, pivotRow);
                u.SwapRows(position, pivotRow);
                if (u[position, position] != 0)
                {
                    for (int y = position + 1; y < order; y++)
                    {
                        double pivot = u[position, y] / u[position, position];
                        for (int x = position; x < order; x++)
                            u[x, y] -= pivot * u[x, position];
                        u[position, y] = pivot;
                    }
                }
            }
            for (int y = 0; y < order; y++)
                for (int x = 0; x < y; x++)
                {
                    l[x, y] = u[x, y];
                    u[x, y] = 0;
                }
            return new Double[] { l, u, p };
        }
        void SwapRows(int row1, int row2)
        {
            int order = this.Order;
            if (row1 != row2)
            {
                for (int x = 0; x < order; x++)
                {
                    double buffer = this[x, row1];
                    this[x, row1] = this[x, row2];
                    this[x, row2] = buffer;
                }
            }
        }
        /// <summary>
        /// Forward solver lower * x = y. Current object is y. 
        /// </summary>
        /// <param name="lower">Lower triangual matrix.</param>
        /// <returns>Solution x.</returns>
        Double ForwardSubstitution(Double lower)
        {
            Double result = new Double(this.Dimensions);
            for (int x = 0; x < this.Dimensions.Width; x++)
            {
                for (int y = 0; y < this.Dimensions.Height; y++)
                {
                    double accumulator = this[x, y];
                    for (int x2 = 0; x2 < y; x2++)
                        accumulator -= lower[x2, y] * result[x, x2];
                    double value = lower[y, y];
                    if (value != 0)
                        result[x, y] = accumulator / value;
                    else
                        throw new Exception.DivisionByZero();
                }
            }
            return result;
        }
        /// <summary>
        /// Backward solver upper * x = y. Current object is y. 
        /// </summary>
        /// <param name="lower">Upper triangual matrix.</param>
        /// <returns>Solution x.</returns>
        Double BackwardSubstitution(Double upper)
        {
            Double result = new Double(this.Dimensions);
            for (int x = 0; x < this.Dimensions.Width; x++)
            {
                for (int y = this.Dimensions.Height - 1; y >= 0; y--)
                {
                    double accumulator = this[x, y];
                    for (int x2 = y + 1; x2 < upper.Dimensions.Width; x2++)
                        accumulator -= upper[x2, y] * result[x, x2];
                    double value = upper[y, y];
                    if (value != 0)
                        result[x, y] = accumulator / value;
                    else
                        throw new Exception.DivisionByZero();
                }
            }
            return result;
        }
        /// <summary>
        /// Lup least square solver A * x = y.
        /// The current matrix determines the matrix A above.
        /// </summary>
        /// <param name="y">The right hand column y vector of the equation system.</param>
        /// <returns>Return the least square solution to the system.</returns>
        public Double SolveLup(Double y)
        {
            Double result = null;
            if (this.Dimensions.Width > this.Dimensions.Height)
                throw new Exception.InvalidDimensions();
            else
                try
                {
                    if (this.IsSquare)
                    {
                        Double[] lup = this.LupDecomposition();
                        result = (lup[2] * y).ForwardSubstitution(lup[0]).BackwardSubstitution(lup[1]);
                    }
                    else
                    {
                        Double transpose = this.Transpose();
                        Double[] lup = (transpose * this).LupDecomposition();
                        result = (lup[2] * transpose * y).ForwardSubstitution(lup[0]).BackwardSubstitution(lup[1]);
                    }
                }
                catch (Kean.Error.Exception)
                {
                }
            return result;
        }
        /// <summary>
        /// Best optimized least square solver A * x = y. The current matrix determines the matrix A above.
        /// </summary>
        /// <param name="y">The right hand column y vector of the equation system.</param>
        /// <returns>Return the least square solution to the system or null if no such is found.</returns>
        public Double Solve(Double y)
        {
            return this.SolveLup(y);
        }
        /// <summary>
        /// Computes the inverse of the current matrix using Lup-decomposition.
        /// </summary>
        /// <returns>Inverse of the current matrix.</returns>
        public Double Inverse()
        {
            if (!this.IsSquare)
                throw new Exception.InvalidDimensions();
            Double result = null;
            Double[] lup = this.LupDecomposition();
            try
            {
                result = (lup[2] * Double.Identity(this.Order)).ForwardSubstitution(lup[0]).BackwardSubstitution(lup[1]);
            }
            catch (Kean.Error.Exception)
            {
            }
            return result;
        }
        /// <summary>
        /// Computes the determinant of the current matrix using the Lup-decomposition.
        /// </summary>
        /// <returns>Determinant of the current matrix.</returns>
        /// <summary>
        /// Sign of a permutation matrix.
        /// </summary>
        /// <returns>Returns the sign of the permutation matrix.</returns>
        double Sign()
        {
            int[] permutation = new int[this.Dimensions.Height];
            for (int y = 0; y < this.Dimensions.Width; y++)
            {
                int x = 0;
                while (this[x, y] == 0 && x < this.Dimensions.Width)
                    x++;
                permutation[y] = x;
            }
            double accumulated = 1;
            for (int i = 0; i < permutation.Length; i++)
                for (int j = i + 1; j < permutation.Length; j++)
                    accumulated *= (double)(permutation[i] - permutation[j]) / (i - j);
            return Kean.Math.Double.Sign(accumulated);
        }
        #endregion
        #region Static Constructors
        /// <summary>
        /// Creates an identity matrix of given order.
        /// </summary>
        /// <param name="order">Order of matrix to be created.</param>
        /// <returns>Identity matrix of given order.</returns>
        public static Double Identity(int order)
        {
            Double result = new Double(order, order);
            for (int i = 0; i < order; i++)
                result[i, i] = 1;
            return result;
        }
        /// <summary>
        /// Creates a diagonal block matrix with block given. Outside blocks the matrix has zero elements.
        /// </summary>
        /// <param name="matrices">Matrices to be on the diagonal of the created matrix.</param>
        /// <returns>Block diagonal matrix.</returns>
        public static Double Diagonal(params Double[] matrices)
        {
            int width = 0;
            int height = 0;
            for (int i = 0; i < matrices.Length; i++)
            {
                width += matrices[i].Dimensions.Width;
                height += matrices[i].Dimensions.Height;
            }
            Double result = new Double(width, height);
            int k = 0;
            int l = 0;
            for (int i = 0; i < matrices.Length; i++)
            {
                result.Set(k, l, matrices[i]);
                k += matrices[i].Dimensions.Width;
                l += matrices[i].Dimensions.Height;
            }
            return result;
        }
        /// <summary>
        /// Create a matrix from a two-dimensional array of matrices 
        /// such that the given matrices become sub-block-matrices in the 
        /// construted matrix.
        /// </summary>
        /// <param name="matrices"></param>
        /// <returns></returns>
        public static Double Block(Double[,] matrices)
        {
            Double result;
            int width = 0;
            int height = 0;
            int blockWidth = matrices.GetLength(0);
            int blockHeight = matrices.GetLength(1);
            for (int x = 0; x < blockWidth; x++)
            {
                for (int y = 0; y < blockHeight; y++)
                {
                    if (matrices[x, 0].Dimensions.Width != matrices[x, y].Dimensions.Width ||
                    matrices[0, y].Dimensions.Height != matrices[x, y].Dimensions.Height)
                        throw new Exception.InvalidDimensions();
                }
            }
            for (int x = 0; x < blockWidth; x++)
                width += matrices[x, 0].Dimensions.Width;
            for (int y = 0; y < blockHeight; y++)
                height += matrices[0, y].Dimensions.Height;
            result = new Double(width, height);
            width = 0;
            height = 0;
            for (int x = 0; x < blockWidth; x++)
            {
                for (int y = 0; y < blockHeight; y++)
                {
                    Double block = matrices[x, y];
                    for (int xx = 0; xx < block.Dimensions.Width; xx++)
                        for (int yy = 0; yy < block.Dimensions.Height; yy++)
                            result[width + xx, height + yy] = block[xx, yy];
                    height += matrices[0, y].Dimensions.Height;
                }
                width += matrices[x, 0].Dimensions.Width;
                height = 0;
            }
            return result;
        }
        /// <summary>
        /// Column basis vector of given length and with a one a given index.
        /// </summary>
        /// <param name="length">Length of column to be created.</param>
        /// <param name="index">Index to set the one.</param>
        /// <returns>Column vector matrix of given length and a one at given index.</returns>
        public static Double Basis(int length, int index)
        {
            return Double.Basis(length, index, true);
        }
        /// <summary>
        /// Column / Row basis vector of given length and with a one a given index.
        /// </summary>
        /// <param name="length">Length of column to be created.</param>
        /// <param name="index">Index to set the one.</param>
        /// <param name="column">Column vector if set to true, row vector if set to false.</param>
        /// <returns>Column / Row vector matrix of given length and a one at given index.</returns>
        public static Double Basis(int length, int index, bool column)
        {
            Double result = new Double(1, length);
            result[0, index] = 1;
            if (!column)
                result = result.Transpose();
            return result;
        }
        #endregion
        #region Object overides and IEquatable<Double>
        public override bool Equals(object other)
        {
            return (other is Double) && this.Equals(other as Double);
        }
        // other is not null here.
        public bool Equals(Double other)
        {
            bool result = this.Dimensions == other.Dimensions;
            if (result)
            {
                for (int x = 0; x < this.Dimensions.Width; x++)
                    for (int y = 0; y < this.Dimensions.Height; y++)
                        result &= this[x, y] == other[x, y];
            }
            return result;
        }
        public override int GetHashCode()
        {
            int result = this.Dimensions.GetHashCode();
            for (int i = 0; i < this.Dimensions.Area; i++)
                result ^= this.elements[i].GetHashCode();
            return result;
        }
        public override string ToString()
        {
            System.Text.StringBuilder builder = new System.Text.StringBuilder();
            for (int y = 0; y < this.Dimensions.Height; y++)
                for (int x = 0; x < this.Dimensions.Width; x++)
                {
                    builder.Append((Kean.Math.Double.ToString(this[x, y])));
                    builder.Append((x == this.Dimensions.Width - 1) ? ((y == this.Dimensions.Height - 1) ? "" : "; ") : ", ");
                }
            return builder.ToString();
        }
        #endregion
        #region Comparison Functions and IComparable<Double>
        public static bool operator ==(Double left, Double right)
        {
            return
                left.Same(right) || (left.NotNull() && right.NotNull()) &&
                left.Equals(right);
        }
        public static bool operator !=(Double left, Double right)
        {
            return !(left == right);
        }
        #endregion
        #region Casts
        public static explicit operator Double(double[] value)
        {
            Double result = new Double(1, value.Length);
            Array.Copy(value, result.elements, value.Length);
            return result;
        }
        public static explicit operator double[](Double value)
        {
            double[] result = new double[value.elements.Length];
            Array.Copy(value.elements, result, result.Length);
            return result;
        }
        public static explicit operator double[,](Double value)
        {
            double[,] result = new double[value.Dimensions.Width, value.Dimensions.Height];
            for (int x = 0; x < value.Dimensions.Width; x++)
                for (int y = 0; y < value.Dimensions.Height; y++)
                    result[x, y] = value[x, y];
            return result;
        }
        public static explicit operator Double(double[,] value)
        {
            Double result = new Double(value.GetLength(0), value.GetLength(1));
            for (int x = 0; x < result.Dimensions.Width; x++)
                for (int y = 0; y < result.Dimensions.Height; y++)
                    result[x, y] = value[x, y];
            return result;
        }
        #endregion
    }
}
