<#@ template language="C#" hostspecific="True" #>
<#
    GenerateStart("Transform", "Kean.Math.Geometry2D", "Single",  "float");
	GenerateSingle("Transform");
    GenerateEnd("Transform", "Kean.Math.Geometry2D", "Single",  "float");
  	SaveOutput("Single/Transform.cs");  
    
    GenerateStart("Transform", "Kean.Math.Geometry2D", "Double",  "double");
    GenerateDouble("Transform");
    GenerateEnd("Transform", "Kean.Math.Geometry2D", "Double",  "double");
    SaveOutput("Double/Transform.cs");   

    GenerateStart("Transform", "Kean.Math.Geometry2D", "Integer",  "int");
    GenerateEnd("Transform", "Kean.Math.Geometry2D", "Integer",  "int");
    SaveOutput("Integer/Transform.cs");    
#>
<#+
  void SaveOutput(string outputFileName)
  {
      string templateDirectory = System.IO.Path.GetDirectoryName(Host.TemplateFile);
      string outputFilePath = System.IO.Path.Combine(templateDirectory, outputFileName);
      System.IO.File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
      this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
  }
#>
<#+
    void GenerateStart(string @name, string @namespace, string @namespace1, string @value1)
    {
#>
// 
//  <#= @name #>.cs (generated by template)
//  
//  Author:
//       Anders Frisk <andersfrisk77@gmail.com>
//  
//  Copyright (c) 2011 Anders Frisk
// 
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU Lesser General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
// 
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU Lesser General Public License for more details.
// 
//  You should have received a copy of the GNU Lesser General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
using System;
using Kean.Extension;

namespace <#= @namespace #>.<#= @namespace1 #>
{
    public struct <#= @name #> :
		IEquatable<<#= @name #>>
    {
        <#= @value1 #> a;
        <#= @value1 #> b;
        <#= @value1 #> c;
        <#= @value1 #> d;
        <#= @value1 #> e;
        <#= @value1 #> f;
        public <#= @value1 #> A
        {
            get { return this.a; }
            set { this.a = value; }
        }
        public <#= @value1 #> B
        {
            get { return this.b; }
            set { this.b = value; }
        }
        public <#= @value1 #> C
        {
            get { return this.c; }
            set { this.c = value; }
        }
        public <#= @value1 #> D
        {
            get { return this.d; }
            set { this.d = value; }
        }
        public <#= @value1 #> E
        {
            get { return this.e; }
            set { this.e = value; }
        }
        public <#= @value1 #> F
        {
            get { return this.f; }
            set { this.f = value; }
        }
		public <#= @value1 #> this[int x, int y]
		{
			get
			{
				<#= @value1 #> result;
				switch (x)
				{
					case 0:
						switch (y)
						{
							case 0: result = this.A; break;
							case 1: result = this.B; break;
							case 2: result = 0; break;
							default: throw new System.Exception(); // TODO: create new exception
						}
						break;
					case 1:
						switch (y)
						{
							case 0: result = this.C; break;
							case 1: result = this.D; break;
							case 2: result = 0; break;
							default: throw new System.Exception(); // TODO: create new exception
						}
						break;
					case 2:
						switch (y)
						{
							case 0: result = this.E; break;
							case 1: result = this.F; break;
							case 2: result = 1; break;
							default: throw new System.Exception(); // TODO: create new exception
						}
						break;
					default: throw new System.Exception(); // TODO: create new exception
				}
				return result;
			}
		}
		#region Properties
		public Size Translation { get { return new Size(this.E, this.F); }}
        public <#= @value1 #> Scaling { get { return (this.ScalingX + this.ScalingY) / 2; } }
		public <#= @value1 #> ScalingX { get { return Kean.Math.<#= @namespace1 #>.SquareRoot(Kean.Math.<#= @namespace1 #>.Squared(this.A) + Kean.Math.<#= @namespace1 #>.Squared(this.B)); } }
		public <#= @value1 #> ScalingY { get { return Kean.Math.<#= @namespace1 #>.SquareRoot(Kean.Math.<#= @namespace1 #>.Squared(this.C) + Kean.Math.<#= @namespace1 #>.Squared(this.D)); } }
		public <#= @value1 #> Rotation { get { return Kean.Math.<#= @namespace1 #>.ArcusTangensExtended(this.B, this.A); } }
      	public <#= @name #> Inverse
		{
			get
			{
				<#= @value1 #> determinant = this.A * this.D - this.B * this.C;
				return new <#= @name #>(
					this.D / determinant,
					-this.B / determinant,
					-this.C / determinant,
					this.A / determinant,
					(this.C * this.F - this.D * this.E) / determinant,
					-(this.A * this.F - this.B * this.E) / determinant
					);
			}
		}
		#endregion
		public <#= @name #>(<#= @value1 #> a, <#= @value1 #> b, <#= @value1 #> c, <#= @value1 #> d, <#= @value1 #> e, <#= @value1 #> f)
        {
            this.a = a;
            this.b = b;
            this.c = c;
            this.d = d;
            this.e = e;
            this.f = f;
        }
		#region Absolute Manipulations
		public <#= @name #> SetTranslation(Size translation)
		{
			return this.Translate(translation - this.Translation);
		}
		public <#= @name #> SetScaling(<#= @value1 #> scaling)
		{
			return this.Scale(scaling / this.Scaling);
		}
		public <#= @name #> SetXScaling(<#= @value1 #> scaling)
		{
			return this.Scale(scaling / this.ScalingX, 1);
		}
		public <#= @name #> SetYScaling(<#= @value1 #> scaling)
		{
			return this.Scale(1, scaling / this.ScalingY);
		}
		public <#= @name #> SetRotation(<#= @value1 #> rotation)
		{
			return this.Rotate(rotation - this.Rotation);
		}
		#endregion
		#region Relative Manipulations
		public <#= @name #> Translate(<#= @value1 #> delta)
        {
            return this.Translate(delta, delta);
        }
        public <#= @name #> Translate(Point delta)
        {
            return this.Translate(delta.X, delta.Y);
        }
        public <#= @name #> Translate(Size delta)
        {
            return this.Translate(delta.Width, delta.Height);
        }
        public <#= @name #> Translate(<#= @value1 #> xDelta, <#= @value1 #> yDelta)
        {
            return <#= @name #>.CreateTranslation(xDelta, yDelta) * this;
        }
		public <#= @name #> Scale(<#= @value1 #> factor)
        {
            return this.Scale(factor, factor);
        }
		public <#= @name #> Scale(Size factor)
        {
            return this.Scale(factor.Width, factor.Height);
        }
		public <#= @name #> Scale(<#= @value1 #> xFactor, <#= @value1 #> yFactor)
        {
			return <#= @name #>.CreateScaling(xFactor, yFactor) * this;
        }
		public <#= @name #> Rotate(<#= @value1 #> angle)
        {
            return <#= @name #>.CreateRotation(angle) * this;
        }
		public <#= @name #> SkewX(<#= @value1 #> angle)
        {
            return <#= @name #>.CreateSkewingX(angle) * this;
        }
		public <#= @name #> SkewY(<#= @value1 #> angle)
        {
            return <#= @name #>.CreateSkewingY(angle) * this;
        }
        public <#= @name #> ReflectX()
        {
			return <#= @name #>.CreateReflectionX() * this;
        }
        public <#= @name #> ReflectY()
        {
			return <#= @name #>.CreateReflectionY() * this;
        }
        #endregion
		#region Static Creators
		public static <#= @name #> Identity { get {return new <#= @name #>(1,0,0,1,0,0); } }
		public static <#= @name #> CreateTranslation(<#= @value1 #> delta)
		{
			return <#= @name #>.CreateTranslation(delta, delta);
		}
		public static <#= @name #> CreateTranslation(Size delta)
		{
			return <#= @name #>.CreateTranslation(delta.Width, delta.Height);
		}
		public static <#= @name #> CreateTranslation(Point delta)
		{
			return <#= @name #>.CreateTranslation(delta.X, delta.Y);
		}
		public static <#= @name #> CreateTranslation(<#= @value1 #> xDelta, <#= @value1 #> yDelta)
		{
			return new <#= @name #>(1,0,0,1, xDelta, yDelta);
		}
		public static <#= @name #> CreateScaling(<#= @value1 #> factor)
		{
			return <#= @name #>.CreateScaling(factor, factor);
		}
		public static <#= @name #> CreateScaling(<#= @value1 #> xFactor, <#= @value1 #> yFactor)
		{
			return new <#= @name #>(xFactor, 0, 0, yFactor, 0, 0);
		}
		public static <#= @name #> CreateRotation(<#= @value1 #> angle)
		{
			return new <#= @name #>(Kean.Math.<#= @namespace1 #>.Cosinus(angle), Kean.Math.<#= @namespace1 #>.Sinus(angle), -Kean.Math.<#= @namespace1 #>.Sinus(angle), Kean.Math.<#= @namespace1 #>.Cosinus(angle), 0, 0);
		}
		public static <#= @name #> CreateRotation(<#= @value1 #> angle, Point pivot)
		{
			<#= @value1 #> one = 1;
			<#= @value1 #> sine = Kean.Math.<#= @namespace1 #>.Sinus(angle);
			<#= @value1 #> cosine = Kean.Math.<#= @namespace1 #>.Cosinus(angle);
			return new <#= @name #>(cosine, sine, -sine, cosine, (one - cosine) * pivot.X + sine * pivot.Y, -sine * pivot.X + (one - cosine) * pivot.Y);
		}
		public static <#= @name #> CreateSkewingX(<#= @value1 #> angle)
		{
			return new <#= @name #>(1, 0, Kean.Math.<#= @namespace1 #>.Tangens(angle), 1, 0, 0);
		}
		public static <#= @name #> CreateSkewingY(<#= @value1 #> angle)
		{
			return new <#= @name #>(1, Kean.Math.<#= @namespace1 #>.Tangens(angle), 0, 1, 0, 0);
		}
		public static <#= @name #> CreateReflectionX()
		{
			return new <#= @name #>(-1, 0, 0, 1, 0, 0);
		}
		public static <#= @name #> CreateReflectionY()
		{
			return new <#= @name #>(1, 0, 0, -1, 0, 0);
		}
		#endregion
		#region Arithmetic Operators
		public static <#= @name #> operator *(<#= @name #> left, <#= @name #> right)
		{
			return new <#= @name #>(
				left.A * right.A + left.C * right.B,
				left.B * right.A + left.D * right.B,
				left.A * right.C + left.C * right.D,
				left.B * right.C + left.D * right.D,
				left.A * right.E + left.C * right.F + left.E,
				left.B * right.E + left.D * right.F + left.F);
		}
		#endregion
        #region Comparison Operators
        /// <summary>
        /// Defines equality.
        /// </summary>
        /// <param name="Left">Point Left of operator.</param>
        /// <param name="Right">Point Right of operator.</param>
        /// <returns>True if <paramref name="Left"/> equals <paramref name="Right"/> else false.</returns>
        public static bool operator ==(<#= @name #> left, <#= @name #> right)
        {
            return left.A == right.A && left.B == right.B && left.C == right.C && left.D == right.D && left.E == right.E && left.F == right.F;
        }
        /// <summary>
        /// Defines inequality.
        /// </summary>
        /// <param name="Left">Point Left of operator.</param>
        /// <param name="Right">Point Right of operator.</param>
        /// <returns>False if <paramref name="Left"/> equals <paramref name="Right"/> else true.</returns>
        public static bool operator !=(<#= @name #> left, <#= @name #> right)
        {
            return !(left == right);
        }
        #endregion
		#region IEquatable<<#= @name #>> Members
		public bool Equals(<#= @name #> other)
		{
			return this == other;
		}
		#endregion
        #region Casts
<#+
    }  
#><#+
    void GenerateDouble(string @name)
    {
#>
        public static implicit operator <#= @name #>(Single.<#= @name #> value)
        {
            return new <#= @name #>(value.A, value.B, value.C, value.D, value.E, value.F);
        }
        public static implicit operator <#= @name #>(Integer.<#= @name #> value)
        {
            return new <#= @name #>(value.A, value.B, value.C, value.D, value.E, value.F);
        }
        public static explicit operator Single.<#= @name #>(<#= @name #> value)
        {
            return new Single.<#= @name #>((float)value.A, (float)value.B, (float)value.C, (float)value.D, (float)value.E, (float)value.F);
        }
        public static explicit operator Integer.<#= @name #>(<#= @name #> value)
        {
            return new Integer.<#= @name #>((int)value.A, (int)value.B, (int)value.C, (int)value.D, (int)value.E, (int)value.F);
        }
<#+
    }  
#><#+
    void GenerateSingle(string @name)
    {
#>
        public static implicit operator <#= @name #>(Integer.<#= @name #> value)
        {
            return new <#= @name #>(value.A, value.B, value.C, value.D, value.E, value.F);
        }
        public static explicit operator Integer.<#= @name #>(<#= @name #> value)
        {
            return new Integer.<#= @name #>((int)value.A, (int)value.B, (int)value.C, (int)value.D, (int)value.E, (int)value.F);
        }
<#+
    }  
#><#+
    void GenerateEnd(string @name, string @namespace, string @namespace1, string @value1)
    {
#>
        public static implicit operator string(<#= @name #> value)
        {
            return value.NotNull() ? value.ToString() : null;
        }
        public static explicit operator <#= @name #>(string value)
        {
            <#= @name #> result = new <#= @name #>();
            if (value.NotEmpty())
            {
                try
                {
                    string[] values = value.Split(new char[] { ',', ' ', ';' }, StringSplitOptions.RemoveEmptyEntries);
                    if (values.Length == 6)
                        result = new <#= @name #>(Kean.Math.<#= @namespace1 #>.Parse(values[0]), Kean.Math.<#= @namespace1 #>.Parse(values[1]), Kean.Math.<#= @namespace1 #>.Parse(values[2]), Kean.Math.<#= @namespace1 #>.Parse(values[3]), Kean.Math.<#= @namespace1 #>.Parse(values[4]), Kean.Math.<#= @namespace1 #>.Parse(values[5]));
                }
                catch
                {
                }
            }
            return result;
        }
		public static explicit operator <#= @value1 #>[,](<#= @name #> value)
		{
			<#= @value1 #>[,] result = new <#= @value1 #>[3, 3];
			for (int x = 0; x < 3; x++)
				for (int y = 0; y < 3; y++)
					result[x, y] = value[x, y];
			return result;
		}
		public static implicit operator byte[](<#= @name #> value)
		{
			int size = sizeof(<#= @value1 #>);
			byte[] result = new byte[6 * size];
			for (int x = 0; x < 3; x++)
				for (int y = 0; y < 2; y++)
					Array.Copy(value[x, y].AsBinary(), 0, result, (x + y * 3) * size, size);
			return result;
		}
        #endregion
        #region Object Overrides
		/// <summary>
		/// Return true if this object and <paramref name="other">other</paramref> are equal.
		/// </summary>
		/// <param name="other">Object to compare with</param>
		/// <returns>True if this object and <paramref name="other">other</paramref> are equal else false.</returns>
		public override bool Equals(object other)
		{
			return (other is <#= @name #>) && this.Equals((<#= @name #>)other);
		}
		/// <summary>
        /// Returns a hash code for this instance.
        /// </summary>
        /// <returns>Hash code for this instance.</returns>
        public override int GetHashCode()
        {
            return (33 * (33 * (33 * (33 * this.A.GetHashCode() ^ this.B.GetHashCode()) ^ this.C.GetHashCode()) ^ this.D.GetHashCode()) ^ this.E.GetHashCode()) ^ this.F.GetHashCode();
        }
        public override string ToString()
        {
			return this.ToString("{0}, {1}, {2}, {3}, {4}, {5}");
		}
		public string ToString(string format)
		{
			return String.Format(format, 
			Kean.Math.<#= @namespace1 #>.ToString(this.A), 
			Kean.Math.<#= @namespace1 #>.ToString(this.B), 
			Kean.Math.<#= @namespace1 #>.ToString(this.C), 
			Kean.Math.<#= @namespace1 #>.ToString(this.D), 
			Kean.Math.<#= @namespace1 #>.ToString(this.E), 
			Kean.Math.<#= @namespace1 #>.ToString(this.F));
		}
        public string ToMatlabString()
        {
            return this.ToString("{0}, {2}, {4}; {1}, {3}, {5}; 0, 0, 1");
        }
		#endregion
    }
}
<#+
    }  
#>
