<#@ template language="C#" hostspecific="True" #>
<#
	GenerateStart("Shell", "Kean.Math.Geometry2D", "Single",  "float");
	GenerateSingle("Shell");
	GenerateEnd("Shell", "Kean.Math.Geometry2D", "Single",  "float");
	SaveOutput("Single/Shell.cs");  
	
	GenerateStart("Shell", "Kean.Math.Geometry2D", "Double",  "double");
	GenerateDouble("Shell");
	GenerateEnd("Shell", "Kean.Math.Geometry2D", "Double",  "double");
	SaveOutput("Double/Shell.cs");   

	GenerateStart("Shell", "Kean.Math.Geometry2D", "Integer",  "int");
	GenerateEnd("Shell", "Kean.Math.Geometry2D", "Integer",  "int");
	SaveOutput("Integer/Shell.cs");    
#>
<#+
  void SaveOutput(string outputFileName)
  {
	  string templateDirectory = System.IO.Path.GetDirectoryName(Host.TemplateFile);
	  string outputFilePath = System.IO.Path.Combine(templateDirectory, outputFileName);
	  System.IO.File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
	  this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
  }
#>
<#+
	void GenerateStart(string @name, string @namespace, string @namespace1, string @value1)
	{
#>
// 
//  <#= @name #>.cs (generated by template)
//  
//  Author:
//       Simon Mika <smika@hx.se>
//  
//  Copyright (c) 2011 Simon Mika
// 
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU Lesser General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
// 
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU Lesser General Public License for more details.
// 
//  You should have received a copy of the GNU Lesser General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.

using System;
using Kean.Extension;

namespace <#= @namespace #>.<#= @namespace1 #>
{
	public struct <#= @name #> :
		IEquatable<<#= @name #>>
	{
		public <#= @value1 #> Left;
		public <#= @value1 #> Right;
		public <#= @value1 #> Top;
		public <#= @value1 #> Bottom;
		public Point LeftTop { get { return new Point(this.Left, this.Top); } }
		public Size Size { get { return new Size(this.Left + this.Right, this.Top + this.Bottom); } }
		public Point Balance { get { return new Point(this.Right - this.Left, this.Bottom - this.Top); } }
		public bool IsZero { get { return this.Left == 0 && this.Right == 0 && this.Top == 0 && this.Bottom == 0; } }
		public bool NotZero { get { return this.Left != 0 && this.Right != 0 && this.Top != 0 && this.Bottom != 0; } }
	  
		public <#= @name #>(<#= @value1 #> value) : this(value, value) { }
		public <#= @name #>(<#= @value1 #> x, <#= @value1 #> y) : this(x, x, y, y) { }
		public <#= @name #>(<#= @value1 #> left, <#= @value1 #> right, <#= @value1 #> top, <#= @value1 #> bottom)
		{
			this.Left = left;
			this.Right = right;
			this.Top = top;
			this.Bottom = bottom;
		}
		#region Increase, Decrease
		public Box Decrease(Size size)
		{
			return new Box(this.Left, this.Top, size.Width - this.Left - this.Right, size.Height - this.Top - this.Bottom);
		}
		public Box Increase(Size size)
		{
			return  new Box(-this.Left, -this.Right, size.Width + this.Left + this.Right, size.Height + this.Top + this.Bottom);
		}
		public Box Decrease(Box  box)
		{
			return new Box(box.LeftTop.X + this.Left, box.LeftTop.Y + this.Top, box.Size.Width - this.Left - this.Right, box.Size.Height - this.Top - this.Bottom);
		}
		public Box Increase(Box box)
		{
			return new Box(box.LeftTop.X - this.Left, box.LeftTop.Y - this.Top, box.Size.Width + this.Left + this.Right, box.Size.Height + this.Top + this.Bottom);
		}
		#endregion
		#region Static Operators
		public static Size operator -(Size left, <#= @name #> right)
		{
			return new Size(left.Width - right.Left - right.Right, left.Height - right.Top - right.Bottom);
		}
		public static Size operator +(Size left, <#= @name #> right)
		{
			return new Size(left.Width + right.Left + right.Right, left.Height + right.Top + right.Bottom);
		}
		public static <#= @name #> operator +(<#= @name #> left, <#= @name #> right)
		{
			return new <#= @name #>(left.Left + right.Left, left.Right + right.Right, left.Top + right.Top, left.Bottom + right.Bottom);
		}
		public static <#= @name #> operator -(<#= @name #> left, <#= @name #> right)
		{
			return new <#= @name #>(left.Left - right.Left, left.Right - right.Right, left.Top - right.Top, left.Bottom - right.Bottom);
		}
		public static <#= @name #> Maximum(<#= @name #> left, <#= @name #> right)
		{
			return new <#= @name #>(Kean.Math.<#= @namespace1 #>.Maximum(left.Left, right.Left), Kean.Math.<#= @namespace1 #>.Maximum(left.Right, right.Right), Kean.Math.<#= @namespace1 #>.Maximum(left.Top, right.Top), Kean.Math.<#= @namespace1 #>.Maximum(left.Bottom, right.Bottom));
		}
		public static <#= @name #> Minimum(<#= @name #> left, <#= @name #> right)
		{
			return new <#= @name #>(Kean.Math.<#= @namespace1 #>.Minimum(left.Left, right.Left), Kean.Math.<#= @namespace1 #>.Minimum(left.Right, right.Right), Kean.Math.<#= @namespace1 #>.Minimum(left.Top, right.Top), Kean.Math.<#= @namespace1 #>.Minimum(left.Bottom, right.Bottom));
		}
		#endregion
		#region Comparison Operators
		/// <summary>
		/// Defines equality.
		/// </summary>
		/// <param name="Left">Point Left of operator.</param>
		/// <param name="Right">Point Right of operator.</param>
		/// <returns>True if <paramref name="Left"/> equals <paramref name="Right"/> else false.</returns>
		public static bool operator ==(<#= @name #> left, <#= @name #> right)
		{
			return left.Left == right.Left && left.Right == right.Right && left.Top == right.Top && left.Bottom == right.Bottom;
		}
		/// <summary>
		/// Defines inequality.
		/// </summary>
		/// <param name="Left">Point Left of operator.</param>
		/// <param name="Right">Point Right of operator.</param>
		/// <returns>False if <paramref name="Left"/> equals <paramref name="Right"/> else true.</returns>
		public static bool operator !=(<#= @name #> left, <#= @name #> right)
		{
			return !(left == right);
		}
		#endregion
		#region Casts
<#+
	}  
#>
<#+
	void GenerateDouble(string @name)
	{
#>
		public static implicit operator <#= @name #>(Single.<#= @name #> value)
		{
			return new <#= @name #>(value.Left, value.Right, value.Top, value.Bottom);
		}
		public static implicit operator <#= @name #>(Integer.<#= @name #> value)
		{
			return new <#= @name #>(value.Left, value.Right, value.Top, value.Bottom);
		}
		public static explicit operator Single.<#= @name #>(<#= @name #> value)
		{
			return new Single.<#= @name #>((float)value.Left, (float)value.Right, (float)value.Top, (float)value.Bottom);
		}
		public static explicit operator Integer.<#= @name #>(<#= @name #> value)
		{
			return new Integer.<#= @name #>((int)value.Left, (int)value.Right, (int)value.Top, (int)value.Bottom);
		}
<#+
	}  
#>
<#+
	void GenerateSingle(string @name)
	{
#>
		public static implicit operator <#= @name #>(Integer.<#= @name #> value)
		{
			return new <#= @name #>(value.Left, value.Right, value.Top, value.Bottom);
		}
		public static explicit operator Integer.<#= @name #>(<#= @name #> value)
		{
			return new Integer.<#= @name #>((int)value.Left, (int)value.Right, (int)value.Top, (int)value.Bottom);
		}
<#+
	}  
#>
<#+
	void GenerateEnd(string @name, string @namespace, string @namespace1, string @value1)
	{
#>
		public static implicit operator string(<#= @name #> value)
		{
			return value.NotNull() ? value.ToString() : null;
		}
		public static explicit operator <#= @name #>(string value)
		{
			<#= @name #> result = new <#= @name #>();
			if (value.NotEmpty())
			{
				try
				{
					string[] values = value.Split(new char[] { ',', ' ' }, StringSplitOptions.RemoveEmptyEntries);
					if (values.Length == 4)
						result = new <#= @name #>(Kean.Math.<#= @namespace1 #>.Parse(values[0]), Kean.Math.<#= @namespace1 #>.Parse(values[1]), Kean.Math.<#= @namespace1 #>.Parse(values[2]), Kean.Math.<#= @namespace1 #>.Parse(values[3]));
					else if (values.Length == 2)
						result = new <#= @name #>(Kean.Math.<#= @namespace1 #>.Parse(values[0]), Kean.Math.<#= @namespace1 #>.Parse(values[1]));
					else if (values.Length == 1)
						result = new <#= @name #>(Kean.Math.<#= @namespace1 #>.Parse(values[0]));
				}
				catch
				{
				}
			}
			return result;
		}
		#endregion
		#region Object Overrides
		public override bool Equals(object other)
		{
			return (other is <#= @name #>) && this.Equals((<#= @name #>)other);
		}
		/// <summary>
		/// Return true if this object and <paramref name="other">other</paramref> are equal.
		/// </summary>
		/// <param name="other">Object to compare with</param>
		/// <returns>True if this object and <paramref name="other">other</paramref> are equal else false.</returns>
		public bool Equals(<#= @name #> other)
		{
			return this == other;
		}
		public override int GetHashCode()
		{
			return 33 * (33 * (33 * this.Left.GetHashCode() ^ this.Right.GetHashCode()) ^ this.Top.GetHashCode()) ^ this.Bottom.GetHashCode();
		}
		public override string ToString()
		{
			return (this.Bottom == this.Top && this.Left == this.Right) ? (this.Left == this.Top ? this.ToString("{0}") : this.ToString("{0}, {2}")) : this.ToString("{0}, {1}, {2}, {3}");
		}
		public string ToString(string format)
		{
			return String.Format(format, Kean.Math.<#= @namespace1 #>.ToString(this.Left), Kean.Math.<#= @namespace1 #>.ToString(this.Right), Kean.Math.<#= @namespace1 #>.ToString(this.Top), Kean.Math.<#= @namespace1 #>.ToString(this.Bottom));
		}
		#endregion
	}
}
<#+
	}  
#>
