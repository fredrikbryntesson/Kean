<#@ template language="C#" hostspecific="True" #>
<#
    GenerateStart("Point", "Kean.Math.Geometry2D", "Single",  "float");
    GenerateSingle("Point");
    GenerateEnd("Point", "Kean.Math.Geometry2D", "Single",  "float");
    SaveOutput("Single/Point.cs");  
    
    GenerateStart("Point", "Kean.Math.Geometry2D", "Double",  "double");
    GenerateDouble("Point");
    GenerateEnd("Point", "Kean.Math.Geometry2D", "Double",  "double");
    SaveOutput("Double/Point.cs");   

    GenerateStart("Point", "Kean.Math.Geometry2D", "Integer",  "int");
    GenerateEnd("Point", "Kean.Math.Geometry2D", "Integer",  "int");
    SaveOutput("Integer/Point.cs");  
#>
<#+
  void SaveOutput(string outputFileName)
  {
      string templateDirectory = System.IO.Path.GetDirectoryName(Host.TemplateFile);
      string outputFilePath = System.IO.Path.Combine(templateDirectory, outputFileName);
      System.IO.File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
      this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
  }
#>
<#+
    void GenerateStart(string @name, string @namespace, string @namespace1, string @value1)
    {
#>
// 
//  <#= @name #>.cs (generated by template)
//  
//  Author:
//       Simon Mika <smika@hx.se>
//  
//  Copyright (c) 2011-2013 Simon Mika
// 
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU Lesser General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
// 
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU Lesser General Public License for more details.
// 
//  You should have received a copy of the GNU Lesser General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.

using System;
using Kean.Extension;

namespace <#= @namespace #>.<#= @namespace1 #>
{
    public struct <#= @name #> :
        IEquatable<<#= @name #>>
    {
        public <#= @value1 #> X;
        public <#= @value1 #> Y;
        public <#= @value1 #> Length { get { return this.Norm; } }
        public <#= @value1 #> Norm { get { return Kean.Math.<#= @namespace1 #>.SquareRoot(this.ScalarProduct(this)); } }
        public <#= @value1 #> Azimuth { get { return Kean.Math.<#= @namespace1 #>.ArcusTangensExtended(this.Y, this.X); } }
        #region Static Constants
        public static <#= @name #> BasisX { get { return new <#= @name #>(1, 0); } }
        public static <#= @name #> BasisY { get { return new <#= @name #>(0, 1); } }
        #endregion
        public <#= @name #>(<#= @value1 #> x, <#= @value1 #> y)
        {
            this.X = x;
            this.Y = y;
        }
        public <#= @value1 #> PNorm(<#= @value1 #> p)
        {
            <#= @value1 #> result;
            if (<#= @value1 == "int" ? "p == int.MaxValue" : @value1+".IsPositiveInfinity(p)" #>)
                result = Kean.Math.<#= @namespace1 #>.Maximum(Kean.Math.<#= @namespace1 #>.Absolute(this.X), Kean.Math.<#= @namespace1 #>.Absolute(this.Y));
            else if (p == 1)
                result = Kean.Math.<#= @namespace1 #>.Absolute(this.X) + Kean.Math.<#= @namespace1 #>.Absolute(this.Y);
            else
                result = Kean.Math.<#= @namespace1 #>.Power(Kean.Math.<#= @namespace1 #>.Power(Kean.Math.<#= @namespace1 #>.Absolute(this.X), p) + Kean.Math.<#= @namespace1 #>.Power(Kean.Math.<#= @namespace1 #>.Absolute(this.Y), p), 1 / p);
            return result;
        }
        /// <summary>
        /// Angle from current to other point vector.
        /// </summary>
        /// <param name="other"></param>
        /// <returns>Angle in radians.</returns>
        public <#= @value1 #> Angle(<#= @name #> other)
        {
            <#= @value1 #> result = 0;
            result = this.ScalarProduct(other) / (this.Norm * other.Norm);
            <#= @value1 #> sign = this.X * other.Y - this.Y * other.X;
            result = Kean.Math.<#= @namespace1 #>.ArcusCosinus(Kean.Math.<#= @namespace1 #>.Clamp(result, -1, 1));
            result *= sign < 0 ? -1 : 1;
            return result;
        }
        public <#= @value1 #> ScalarProduct(<#= @name #> other)
        {
            return this.X * other.X + this.Y * other.Y;
        }
        public <#= @value1 #> Distance(<#= @name #> other)
        {
            return (this - other).Norm;
        }
        #region Utility functions
        public <#= @name #> Swap()
        {
            return new <#= @name #>(this.Y, this.X);
        }
        public <#= @name #> Round()
        {
            return new <#= @name #>(Kean.Math.<#= @namespace1 #>.Round(this.X), Kean.Math.<#= @namespace1 #>.Round(this.Y));
        }
        public <#= @name #> Ceiling()
        {
            return new <#= @name #>(Kean.Math.<#= @namespace1 #>.Ceiling(this.X), Kean.Math.<#= @namespace1 #>.Ceiling(this.Y));
        }
        public <#= @name #> Floor()
        {
            return new <#= @name #>(Kean.Math.<#= @namespace1 #>.Floor(this.X), Kean.Math.<#= @namespace1 #>.Floor(this.Y));
        }
        public <#= @name #> Minimum(Size floor)
        {
            return new <#= @name #>(Kean.Math.<#= @namespace1 #>.Minimum(this.X, floor.Width), Kean.Math.<#= @namespace1 #>.Minimum(this.Y, floor.Height));
        }
        public <#= @name #> Maximum(Size ceiling)
        {
            return new <#= @name #>(Kean.Math.<#= @namespace1 #>.Maximum(this.X, ceiling.Width), Kean.Math.<#= @namespace1 #>.Maximum(this.Y, ceiling.Height));
        }
        public <#= @name #> Clamp(Size floor, Size ceiling)
        {
            return new <#= @name #>(Kean.Math.<#= @namespace1 #>.Clamp(this.X, floor.Width, ceiling.Width), Kean.Math.<#= @namespace1 #>.Clamp(this.Y, floor.Height, ceiling.Height));
        }
        #endregion
        #region Arithmetic Vector - Vector Operators
        public static <#= @name #> operator +(<#= @name #> left, <#= @name #> right)
        {
            return new <#= @name #>(left.X + right.X, left.Y + right.Y);
        }
        public static <#= @name #> operator +(<#= @name #> left, Size right)
        {
            return new <#= @name #>(left.X + right.Width, left.Y + right.Height);
        }
        public static <#= @name #> operator +(Size left, <#= @name #> right)
        {
            return new <#= @name #>(left.Width + right.X, left.Height + right.Y);
        }
        public static <#= @name #> operator -(<#= @name #> left, <#= @name #> right)
        {
            return new <#= @name #>(left.X - right.X, left.Y - right.Y);
        }
        public static <#= @name #> operator -(<#= @name #> left, Size right)
        {
            return new <#= @name #>(left.X - right.Width, left.Y - right.Height);
        }
        public static <#= @name #> operator -(Size left, <#= @name #> right)
        {
            return new <#= @name #>(left.Width - right.X, left.Height - right.Y);
        }
        public static <#= @name #> operator -(<#= @name #> vector)
        {
            return new <#= @name #>(-vector.X, -vector.Y);
        }
        public static <#= @name #> operator *(<#= @name #> left, <#= @name #> right)
        {
            return new <#= @name #>(left.X * right.X, left.Y * right.Y);
        }
        public static <#= @name #> operator *(<#= @name #> left, Size right)
        {
            return new <#= @name #>(left.X * right.Width, left.Y * right.Height);
        }
        public static <#= @name #> operator *(Size left, <#= @name #> right)
        {
            return new <#= @name #>(left.Width * right.X, left.Height * right.Y);
        }
        public static <#= @name #> operator /(<#= @name #> left, <#= @name #> right)
        {
            return new <#= @name #>(left.X / right.X, left.Y / right.Y);
        }
        public static <#= @name #> operator /(<#= @name #> left, Size right)
        {
            return new <#= @name #>(left.X / right.Width, left.Y / right.Height);
        }
        public static <#= @name #> operator /(Size left, <#= @name #> right)
        {
            return new <#= @name #>(left.Width / right.X, left.Height / right.Y);
        }
        #endregion
        #region Arithmetic Vector and Scalar
        public static <#= @name #> operator *(<#= @name #> left, <#= @value1 #> right)
        {
            return new <#= @name #>(left.X * right, left.Y * right);
        }
        public static <#= @name #> operator *(<#= @value1 #> left, <#= @name #> right)
        {
            return right * left;
        }
<#= @value1 == "double" ? @"
        public static " + @name + " operator *(" + @name + @" left, float right)
        {
            return new " + @name + @"(left.X * right, left.Y * right);
        } 
        public static " + @name + " operator *(" + @name + @" left, int right)
        {
            return new " + @name + @"(left.X * right, left.Y * right);
        }
        public static " + @name + " operator *(float left, " + @name + @" right)
        {
           return right * left;
        } 
        public static " + @name + " operator *(int left, " + @name + @" right)
        {
            return right * left;
        }
        public static " + @name + " operator /(" + @name + @" left, float right)
        {
            return new " + @name + @"(left.X / right, left.Y / right);
        } 
        public static " + @name + " operator /(" + @name + @" left, int right)
        {
            return new " + @name + @"(left.X / right, left.Y / right);
        }" 
: "" 
#>
<#= @value1 == "float" ? @"
        public static " + @name + " operator *(" + @name + @" left, int right)
        {
            return new " + @name + @"(left.X * right, left.Y * right);
        }
        public static " + @name + " operator *(int left, " + @name + @" right)
        {
            return right * left;
        }
        public static " + @name + " operator /(" + @name + @" left, int right)
        {
            return new " + @name + @"(left.X / right, left.Y / right);
        }" 
: "" 
#>
        public static <#= @name #> operator /(<#= @name #> left, <#= @value1 #> right)
        {
            return new <#= @name #>(left.X / right, left.Y / right);
        }
        #endregion
        #region Arithmetic Transform and Vector
        public static <#= @name #> operator *(Transform left, <#= @name #> right)
        {
            return new <#= @name #>(left.A * right.X + left.C * right.Y + left.E, left.B * right.X + left.D * right.Y + left.F);
        }
        #endregion
        #region Comparison Operators
        /// <summary>
        /// Defines equality.
        /// </summary>
        /// <param name="Left">Point Left of operator.</param>
        /// <param name="Right">Point Right of operator.</param>
        /// <returns>True if <paramref name="Left"/> equals <paramref name="Right"/> else false.</returns>
        public static bool operator ==(<#= @name #> left, <#= @name #> right)
        {
            return left.X == right.X && left.Y == right.Y;
        }
        /// <summary>
        /// Defines inequality.
        /// </summary>
        /// <param name="Left">Point Left of operator.</param>
        /// <param name="Right">Point Right of operator.</param>
        /// <returns>False if <paramref name="Left"/> equals <paramref name="Right"/> else true.</returns>
        public static bool operator !=(<#= @name #> left, <#= @name #> right)
        {
            return !(left == right);
        }
        public static bool operator <(<#= @name #> left, <#= @name #> right)
        {
            return left.X < right.X && left.Y < right.Y;
        }
        public static bool operator >(<#= @name #> left, <#= @name #> right)
        {
            return left.X > right.X && left.Y > right.Y;
        }
        public static bool operator <=(<#= @name #> left, <#= @name #> right)
        {
            return left.X <= right.X && left.Y <= right.Y;
        }
        public static bool operator >=(<#= @name #> left, <#= @name #> right)
        {
            return left.X >= right.X && left.Y >= right.Y;
        }
        #endregion
        #region IEquatable<<#= @name #>> Members
        public bool Equals(<#= @name #> other)
        {
            return this == other;
        }
        #endregion
        #region Object Overrides
        public override bool Equals(object other)
        {
            return other is <#= @name #> && this.Equals((<#= @name #>)other);
        }
        public override int GetHashCode()
        {
            return 33 * this.X.GetHashCode() ^ this.Y.GetHashCode();
        }
        public override string ToString()
        {
			return this.ToString("{0}, {1}");
		}
		public string ToString(string format)
		{
			return String.Format(format, Kean.Math.<#= @namespace1 #>.ToString(this.X), Kean.Math.<#= @namespace1 #>.ToString(this.Y));
		}
        #endregion
        #region Static Creators
        public static <#= @name #> Polar(<#= @value1 #> radius, <#= @value1 #> azimuth)
        {
            return new <#= @name #>(radius * Kean.Math.<#= @namespace1 #>.Cosinus(azimuth), radius * Kean.Math.<#= @namespace1 #>.Sinus(azimuth));
        }
        #endregion
        #region Casts
        public static implicit operator <#= @value1 #>[](<#= @name #> value)
        {
            return new <#= @value1 #>[] { value.X, value.Y };
        }
        public static explicit operator <#= @name #>(<#= @value1 #>[] value)
        {
            return new <#= @name #>(value[0], value[1]);
        }
        public static implicit operator string(<#= @name #> value)
        {
            return value.ToString();
        }
        public static explicit operator <#= @name #>(string value)
        {
            <#= @name #> result = new <#= @name #>();
            if (value.NotEmpty())
            {
                try
                {
                    string[] values = value.Split(new char[] { ',', ' ' }, StringSplitOptions.RemoveEmptyEntries);
                    if (values.Length == 2)
                        result = new <#= @name #>(Kean.Math.<#= @namespace1 #>.Parse(values[0]), Kean.Math.<#= @namespace1 #>.Parse(values[1]));
                }
                catch
                {
                }
            }
            return result;
        }
        public static explicit operator Size(<#= @name #> value)
        {
            return new Size(value.X, value.Y);
        }
        public static explicit operator <#= @name #>(Size value)
        {
            return new <#= @name #>(value.Width, value.Height);
        }
<#+
    }  
#>

<#+
    void GenerateDouble(string @name)
    {
#>
        public static implicit operator <#= @name #>(Single.<#= @name #> value)
        {
            return new <#= @name #>(value.X, value.Y);
        }
        public static implicit operator <#= @name #>(Integer.<#= @name #> value)
        {
            return new <#= @name #>(value.X, value.Y);
        }
        public static explicit operator Single.<#= @name #>(<#= @name #> value)
        {
            return new Single.<#= @name #>(Kean.Math.Single.Convert(value.X), Kean.Math.Single.Convert(value.Y));
        }
        public static explicit operator Integer.<#= @name #>(<#= @name #> value)
        {
            return new Integer.<#= @name #>(Kean.Math.Integer.Convert(value.X), Kean.Math.Integer.Convert(value.Y));
        }
        #endregion
        #region Static Operators
        public static <#= @name #> Ceiling(Geometry2D.Single.<#= @name #> other)
        {
            return new <#= @name #>(Kean.Math.Integer.Ceiling(other.X), Kean.Math.Integer.Ceiling(other.Y));
        }
        public static <#= @name #> Floor(Geometry2D.Single.<#= @name #> other)
        {
            return new <#= @name #>(Kean.Math.Integer.Floor(other.X), Kean.Math.Integer.Floor(other.Y));
        }
         public static <#= @name #> Floor(<#= @name #> other)
        {
            return new <#= @name #>(Kean.Math.Integer.Floor(other.X), Kean.Math.Integer.Floor(other.Y));
        }
        public static <#= @name #> Ceiling(<#= @name #> other)
        {
            return new <#= @name #>(Kean.Math.Integer.Ceiling(other.X), Kean.Math.Integer.Ceiling(other.Y));
        }
<#+
    }  
#>

<#+
    void GenerateSingle(string @name)
    {
#>
        public static implicit operator <#= @name #>(Integer.<#= @name #> value)
        {
            return new <#= @name #>(value.X, value.Y);
        }
        public static explicit operator Integer.<#= @name #>(<#= @name #> value)
        {
            return new Integer.<#= @name #>(Kean.Math.Integer.Convert(value.X), Kean.Math.Integer.Convert(value.Y));
        }
        #endregion
        #region Static Operators
        public static <#= @name #> Floor(<#= @name #> other)
        {
            return new <#= @name #>(Kean.Math.Integer.Floor(other.X), Kean.Math.Integer.Floor(other.Y));
        }
        public static <#= @name #> Ceiling(<#= @name #> other)
        {
            return new <#= @name #>(Kean.Math.Integer.Ceiling(other.X), Kean.Math.Integer.Ceiling(other.Y));
        }
<#+
    }  
#>
<#+
    void GenerateEnd(string @name, string @namespace, string @namespace1, string @value1)
    {
#>
        public static <#= @name #> Maximum(<#= @name #> left, <#= @name #> right)
        {
            return new <#= @name #>(Kean.Math.<#= @namespace1 #>.Maximum(left.X, right.X), Kean.Math.<#= @namespace1 #>.Maximum(left.Y, right.Y));
        }
        public static <#= @name #> Minimum(<#= @name #> left, <#= @name #> right)
        {
            return new <#= @name #>(Kean.Math.<#= @namespace1 #>.Minimum(left.X, right.X), Kean.Math.<#= @namespace1 #>.Minimum(left.Y, right.Y));
        }
        #endregion
  }
}
<#+
    }  
#>
